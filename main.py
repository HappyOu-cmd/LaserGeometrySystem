#!/usr/bin/env python3
"""
üöÄ –í–´–°–û–ö–û–°–ö–û–†–û–°–¢–ù–ê–Ø —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ RIFTEK –¥–ª—è –¥–∞—Ç—á–∏–∫–æ–≤ –†–§602

–†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´:
‚úÖ –ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º (–æ–¥–∏–Ω –¥–∞—Ç—á–∏–∫) - ~1000+ –ì—Ü
‚úÖ QUAD —Ä–µ–∂–∏–º (—á–µ—Ç—ã—Ä–µ –¥–∞—Ç—á–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ) - ~125 –ì—Ü

–°–ò–°–¢–ï–ú–ù–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
‚úÖ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ (psutil)
‚úÖ –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ Windows (1 –º—Å)
‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—è
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ pyftdi –¥–ª—è FTDI –∞–¥–∞–ø—Ç–µ—Ä–æ–≤

–°–ï–¢–ï–í–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
‚úÖ Baudrate 921600 (–º–∞–∫—Å–∏–º—É–º RS485)
‚úÖ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã (2 –º—Å)
‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º
‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –±—É—Ñ–µ—Ä—ã

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
‚úÖ –ù—É–ª–µ–≤—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–µ –≤–∫–ª—é—á–∞—é—Ç –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 20–º–º
‚úÖ Broadcast —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è QUAD —Ä–µ–∂–∏–º–∞
‚úÖ –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞
"""

import time
import struct
import os
import ctypes
from typing import Optional, Tuple
from collections import deque

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ psutil –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
try:
    import psutil
    HAS_PSUTIL = True
except ImportError:
    print("WARNING: psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install psutil")
    HAS_PSUTIL = False

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ pyftdi –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
try:
    from pyftdi.serialext import serial_for_url
    HAS_PYFTDI = True
    print("OK pyftdi –¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏")
except ImportError:
    print("WARNING: pyftdi –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyftdi")
    # Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π serial
    try:
        import serial
        HAS_PYFTDI = False
        print("INFO: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π pyserial")
    except ImportError:
        print("ERROR: –ù–∏ pyftdi, –Ω–∏ pyserial –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫:")
        print("  pip install pyftdi  (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è FTDI)")
        print("  pip install pyserial  (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è)")
        exit(1)


def detect_ftdi_devices():
    """
    –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ FTDI —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    """
    if not HAS_PYFTDI:
        return []
    
    try:
        from pyftdi.ftdi import Ftdi
        devices = []
        for device in Ftdi.list_devices():
            url = f"ftdi://{device[0].hex()}:{device[1].hex()}/1"
            devices.append(url)
        return devices
    except Exception as e:
        print(f"WARNING: –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è FTDI: {e}")
        return []


class HighSpeedRiftekSensor:
    """–í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∞–∑–µ—Ä–Ω—ã–º–∏ –¥–∞—Ç—á–∏–∫–∞–º–∏ RIFTEK –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É RS485"""
    
    def __init__(self, port: str = 'COM7', baudrate: int = 921600, timeout: float = 1.0):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –¥–∞—Ç—á–∏–∫–∞–º–∏ –¥–ª—è –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        
        Args:
            port: COM –ø–æ—Ä—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'COM7' –∏–ª–∏ 'ftdi://ftdi:232h/1' –¥–ª—è pyftdi)
            baudrate: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö (921600)
            timeout: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ (0.002 —Å–µ–∫)
        """
        self.port = port
        self.baudrate = baudrate
        self.timeout = timeout
        self.ser = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.measurement_count = 0
        self.error_count = 0
        self.start_time = None
        self.last_frequency_check = 0
        
        # –ë—É—Ñ–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.timing_buffer = deque(maxlen=100)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤
        self.time_broadcast = 0
        self.time_sync_delay = 0
        self.time_sensor1 = 0
        self.time_sensor2 = 0
        self.time_sensor3 = 0
        self.time_sensor4 = 0
        self.time_conversion = 0
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.broadcast_command = bytes([0x00, 0x85])  # Broadcast latch command
        self.sensor1_command = bytes([0x01, 0x86])    # Sensor 1 read command  
        self.sensor2_command = bytes([0x02, 0x86])    # Sensor 2 read command
        self.sensor3_command = bytes([0x03, 0x86])    # Sensor 3 read command
        self.sensor4_command = bytes([0x04, 0x86])    # Sensor 4 read command
        
    def connect(self) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–æ—Ä—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º pyftdi –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö —Å–∫–æ—Ä–æ—Å—Ç–µ–π –∏–ª–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω ftdi URL
            if HAS_PYFTDI and ('ftdi://' in self.port.lower() or self.baudrate >= 921600):
                print("INFO: –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pyftdi –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏...")
                try:
                    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –æ–±—ã—á–Ω—ã–π COM –ø–æ—Ä—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ FTDI
                    if self.port.upper().startswith('COM'):
                        print("INFO: –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ FTDI —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
                        ftdi_devices = detect_ftdi_devices()
                        if ftdi_devices:
                            ftdi_url = ftdi_devices[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ
                            print(f"INFO: –ù–∞–π–¥–µ–Ω–æ FTDI —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {ftdi_url}")
                        else:
                            ftdi_url = 'ftdi://ftdi:232h/1'  # Fallback —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π URL
                            print("INFO: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π FTDI URL")
                    else:
                        ftdi_url = self.port
                        
                    self.ser = serial_for_url(
                        ftdi_url,
                        baudrate=self.baudrate,
                        bytesize=8,
                        parity='E',  # Even parity
                        stopbits=1,
                        timeout=self.timeout,
                        write_timeout=0.001
                    )
                    
                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ pyftdi - –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç udev
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç udev –¥–ª—è pyftdi
                        if not hasattr(self.ser, 'udev'):
                            self.ser.udev = None
                        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                        if not hasattr(self.ser, '_ftdi'):
                            self.ser._ftdi = None
                    except Exception:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                        pass
                    
                    print(f"OK: pyftdi —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω: {ftdi_url}")
                except Exception as e:
                    print(f"WARNING: –û—à–∏–±–∫–∞ pyftdi: {e}")
                    print("INFO: –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π pyserial...")
                    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback
                    import serial
                    self.ser = serial.Serial(
                        port=self.port.replace('ftdi://ftdi:232h/1', 'COM7'),  # –í–æ–∑–≤—Ä–∞—Ç –∫ COM –ø–æ—Ä—Ç—É
                        baudrate=self.baudrate,
                        bytesize=serial.EIGHTBITS,
                        parity=serial.PARITY_EVEN,
                        stopbits=serial.STOPBITS_ONE,
                        timeout=self.timeout,
                        write_timeout=0.001,
                        inter_byte_timeout=None,
                        rtscts=False,
                        dsrdtr=False,
                        xonxoff=False
                    )
            else:
                # Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π pyserial
                print("INFO: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π pyserial...")
                import serial
                self.ser = serial.Serial(
                    port=self.port,
                    baudrate=self.baudrate,
                    bytesize=serial.EIGHTBITS,
                    parity=serial.PARITY_EVEN,
                    stopbits=serial.STOPBITS_ONE,
                    timeout=self.timeout,
                    write_timeout=0.001,
                    inter_byte_timeout=None,
                    # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    rtscts=False,
                    dsrdtr=False,
                    xonxoff=False
                )
            
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±—É—Ñ–µ—Ä–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            self.ser.reset_input_buffer()
            self.ser.reset_output_buffer()
            
            # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –±—É—Ñ–µ—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            try:
                if hasattr(self.ser, 'set_buffer_size'):
                    self.ser.set_buffer_size(rx_size=128, tx_size=64)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É—Ñ–µ—Ä–æ–≤
            
            print(f"–í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:")
            print(f"  –ü–æ—Ä—Ç: {self.port}")
            print(f"  –°–∫–æ—Ä–æ—Å—Ç—å: {self.baudrate} baud")
            print(f"  –¢–∞–π–º–∞—É—Ç: {self.timeout} —Å–µ–∫")
            print(f"  –û–∂–∏–¥–∞–µ–º–∞—è —á–∞—Å—Ç–æ—Ç–∞: ~1000-2000 –ì—Ü")
            
            self.start_time = time.time()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≤—ã–≤–æ–¥–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.ser:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if hasattr(self.ser, 'is_open') and self.ser.is_open:
                    # –î–ª—è pyftdi –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                    if hasattr(self.ser, '_ftdi'):
                        if not hasattr(self.ser, 'udev'):
                            self.ser.udev = None
                        if not hasattr(self.ser, '_port'):
                            self.ser._port = None
                    self.ser.close()
                elif hasattr(self.ser, '_port'):
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è pyftdi
                    self.ser._port = None
            except AttributeError as e:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ udev
                if 'udev' in str(e):
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç –∏ –∑–∞–∫—Ä—ã—Ç—å
                        if not hasattr(self.ser, 'udev'):
                            self.ser.udev = None
                        if not hasattr(self.ser, '_port'):
                            self.ser._port = None
                        self.ser.close()
                    except:
                        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—É–ª—è–µ–º –æ–±—ä–µ–∫—Ç
                        self.ser = None
                else:
                    # –î—Ä—É–≥–∏–µ AttributeError
                    pass
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
                pass
            finally:
                # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ–±–Ω—É–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—ä–µ–∫—Ç
                self.ser = None
            
            # –í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if self.start_time and self.measurement_count > 0:
                elapsed = time.time() - self.start_time
                avg_frequency = self.measurement_count / elapsed
                error_rate = (self.error_count / self.measurement_count) * 100
                
                print(f"\n{'='*50}")
                print(f"–°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–´–°–û–ö–û–°–ö–û–†–û–°–¢–ù–û–ô –†–ê–ë–û–¢–´")
                print(f"{'='*50}")
                print(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed:.1f} —Å–µ–∫")
                print(f"–í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {self.measurement_count}")
                print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {self.measurement_count - self.error_count}")
                print(f"–û—à–∏–±–æ–∫: {self.error_count}")
                print(f"–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞: {avg_frequency:.1f} –ì—Ü")
                print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {error_rate:.2f}%")
                
                if len(self.timing_buffer) > 1:
                    intervals = [self.timing_buffer[i] - self.timing_buffer[i-1] 
                               for i in range(1, len(self.timing_buffer))]
                    avg_interval = sum(intervals) / len(intervals)
                    if avg_interval > 0:
                        instant_freq = 1.0 / avg_interval
                        print(f"–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞: {instant_freq:.1f} –ì—Ü")
                
                print(f"{'='*50}")
            
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    
    def send_broadcast_latch_command_fast(self):
        """
        –£–õ–¨–¢–†–ê-–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ broadcast –∫–æ–º–∞–Ω–¥—ã –∑–∞—â–µ–ª–∫–∏–≤–∞–Ω–∏—è (05h)
        –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        """
        start_time = time.perf_counter()
        
        try:
            # –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            self.ser.write(self.broadcast_command)
            # –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º flush() - —ç—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç ~0.1–º—Å –∑–∞–¥–µ—Ä–∂–∫–∏
            # –î–∞—Ç—á–∏–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∫–æ–º–∞–Ω–¥—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞ ~50 –º–∫—Å
            
            self.time_broadcast = time.perf_counter() - start_time
        except Exception as e:
            self.error_count += 1
            if self.error_count <= 10:  # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                print(f"–û–®–ò–ë–ö–ê BROADCAST: {e}")
            self.time_broadcast = time.perf_counter() - start_time
    
    def request_measurement_fast(self, sensor_address: int) -> Optional[int]:
        """
        –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∑–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏
        
        Args:
            sensor_address: –ê–¥—Ä–µ—Å –¥–∞—Ç—á–∏–∫–∞ (1-4)
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —É—Å–ª–æ–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (0-16383) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        start_time = time.perf_counter()
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            if sensor_address == 1:
                command = self.sensor1_command
            elif sensor_address == 2:
                command = self.sensor2_command
            elif sensor_address == 3:
                command = self.sensor3_command
            elif sensor_address == 4:
                command = self.sensor4_command
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞–¥—Ä–µ—Å –¥–∞—Ç—á–∏–∫–∞: {sensor_address}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
            self.ser.write(command)
            
            # –ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (4 –±–∞–π—Ç–∞ - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–µ—Ç—Ä–∞–¥–∞–º)
            response = self.ser.read(4)
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 10 –æ—à–∏–±–æ–∫)
            if len(response) != 4:
                self.error_count += 1
                if self.error_count <= 10:  # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                    print(f"–û–®–ò–ë–ö–ê –î–ê–¢–ß–ò–ö {sensor_address}: –ü–æ–ª—É—á–µ–Ω–æ {len(response)} –±–∞–π—Ç –≤–º–µ—Å—Ç–æ 4")
                    if len(response) > 0:
                        print(f"  –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–π—Ç—ã: {[hex(b) for b in response]}")
                if sensor_address == 1:
                    self.time_sensor1 = time.perf_counter() - start_time
                elif sensor_address == 2:
                    self.time_sensor2 = time.perf_counter() - start_time
                elif sensor_address == 3:
                    self.time_sensor3 = time.perf_counter() - start_time
                elif sensor_address == 4:
                    self.time_sensor4 = time.perf_counter() - start_time
                return None
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–≤—Å–µ –±–∞–π—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –±–∏—Ç 7 = 1)
            if not all(byte & 0x80 for byte in response):
                self.error_count += 1
                if self.error_count <= 10:  # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                    print(f"–û–®–ò–ë–ö–ê –î–ê–¢–ß–ò–ö {sensor_address}: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                    print(f"  –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–∞–π—Ç—ã: {[hex(b) for b in response]}")
                    print(f"  –ë–∏—Ç 7 –≤ –±–∞–π—Ç–∞—Ö: {[bool(b & 0x80) for b in response]}")
                if sensor_address == 1:
                    self.time_sensor1 = time.perf_counter() - start_time
                elif sensor_address == 2:
                    self.time_sensor2 = time.perf_counter() - start_time
                elif sensor_address == 3:
                    self.time_sensor3 = time.perf_counter() - start_time
                elif sensor_address == 4:
                    self.time_sensor4 = time.perf_counter() - start_time
                return None
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            byte0 = (response[0] & 0x0F) | ((response[1] & 0x0F) << 4)
            byte1 = (response[2] & 0x0F) | ((response[3] & 0x0F) << 4)
            result = byte0 | (byte1 << 8)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if sensor_address == 1:
                self.time_sensor1 = time.perf_counter() - start_time
            elif sensor_address == 2:
                self.time_sensor2 = time.perf_counter() - start_time
            elif sensor_address == 3:
                self.time_sensor3 = time.perf_counter() - start_time
            elif sensor_address == 4:
                self.time_sensor4 = time.perf_counter() - start_time
            
            return result
            
        except Exception as e:
            self.error_count += 1
            if self.error_count <= 10:  # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                print(f"–û–®–ò–ë–ö–ê –î–ê–¢–ß–ò–ö {sensor_address}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            if sensor_address == 1:
                self.time_sensor1 = time.perf_counter() - start_time
            elif sensor_address == 2:
                self.time_sensor2 = time.perf_counter() - start_time
            elif sensor_address == 3:
                self.time_sensor3 = time.perf_counter() - start_time
            elif sensor_address == 4:
                self.time_sensor4 = time.perf_counter() - start_time
            return None
    
    def convert_to_mm(self, raw_value: int, sensor_range_mm: float, base_distance_mm: float = 20.0) -> float:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—ã—Ä–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ê–ë–°–û–õ–Æ–¢–ù–û–ï —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö
        
        Args:
            raw_value: –°—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –¥–∞—Ç—á–∏–∫–∞ (0-16383)
            sensor_range_mm: –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç—á–∏–∫–∞ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö (25 –º–º)
            base_distance_mm: –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ (20 –º–º)
            
        Returns:
            –ê–ë–°–û–õ–Æ–¢–ù–û–ï —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö
        """
        # –ï—Å–ª–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–µ 0, –Ω–µ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        if raw_value == 0:
            return 0.0
        
        # –§–æ—Ä–º—É–ª–∞: –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = –ë–∞–∑–æ–≤–æ–µ + (D * –î–∏–∞–ø–∞–∑–æ–Ω / 16384)
        # –≥–¥–µ D - —Å—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –î–∏–∞–ø–∞–∑–æ–Ω = 25 –º–º, –ë–∞–∑–æ–≤–æ–µ = 20 –º–º
        offset_mm = (raw_value * sensor_range_mm) / 16384.0
        absolute_distance = base_distance_mm + offset_mm
        return absolute_distance
    

    def start_stream_mode(self, sensor_address: int) -> bool:
        """
        –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ (–∫–æ–º–∞–Ω–¥–∞ 07h)
        
        Args:
            sensor_address: –ê–¥—Ä–µ—Å –¥–∞—Ç—á–∏–∫–∞ (1 –∏–ª–∏ 2)
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: –ë–∞–π—Ç0 = 0|ADR, –ë–∞–π—Ç1 = 1|000|COD
            # ADR = sensor_address, COD = 07h (–∑–∞–ø—Ä–æ—Å –ø–æ—Ç–æ–∫–∞)
            command = bytes([sensor_address, 0x87])  # 0x87 = 1|000|0111
            
            self.ser.write(command)
            print(f"–†–µ–∂–∏–º –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ {sensor_address}")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ {sensor_address}: {e}")
            return False
    
    def stop_stream_mode(self, sensor_address: int) -> bool:
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–æ–º–∞–Ω–¥–∞ 08h)
        
        Args:
            sensor_address: –ê–¥—Ä–µ—Å –¥–∞—Ç—á–∏–∫–∞ (1 –∏–ª–∏ 2)
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: –ë–∞–π—Ç0 = 0|ADR, –ë–∞–π—Ç1 = 1|000|COD
            # ADR = sensor_address, COD = 08h (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞)
            command = bytes([sensor_address, 0x88])  # 0x88 = 1|000|1000
            
            self.ser.write(command)
            print(f"–†–µ–∂–∏–º –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ {sensor_address}")
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ {sensor_address}: {e}")
            return False
    
    def read_stream_data(self, sensor_range_mm: float = 25.0) -> Optional[float]:
        """
        –ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Ç–æ–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        
        Args:
            sensor_range_mm: –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç—á–∏–∫–∞ –≤ –º–º
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ß–∏—Ç–∞–µ–º 4 –±–∞–π—Ç–∞ –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ
            response = self.ser.read(4)
            
            if len(response) != 4:
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç, –ø—Ä–æ–±—É–µ–º –¥–æ—á–∏—Ç–∞—Ç—å
                if len(response) > 0:
                    remaining = self.ser.read(4 - len(response))
                    response += remaining
                    if len(response) != 4:
                        return None
                else:
                    return None
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ (–≤—Å–µ –±–∞–π—Ç—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –±–∏—Ç 7 = 1)
            if not all(byte & 0x80 for byte in response):
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
                for i in range(1, 4):
                    if response[i] & 0x80:  # –ù–∞–π–¥–µ–Ω –±–∞–π—Ç —Å –±–∏—Ç–æ–º 7=1
                        # –ß–∏—Ç–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –±–∞–π—Ç—ã
                        remaining_bytes = self.ser.read(i)
                        if len(remaining_bytes) == i:
                            new_response = response[i:] + remaining_bytes
                            if len(new_response) == 4 and all(b & 0x80 for b in new_response):
                                response = new_response
                                break
                else:
                    return None
            
            # –°–±–æ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ —Ç–µ—Ç—Ä–∞–¥
            byte0 = (response[0] & 0x0F) | ((response[1] & 0x0F) << 4)
            byte1 = (response[2] & 0x0F) | ((response[3] & 0x0F) << 4)
            raw_value = byte0 | (byte1 << 8)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (0-16383)
            if raw_value > 16383:
                return None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –ê–ë–°–û–õ–Æ–¢–ù–û–ï —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö
            if raw_value == 0:
                return 0.0
            offset_mm = (raw_value * sensor_range_mm) / 16384.0
            return 20.0 + offset_mm  # –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ + —Å–º–µ—â–µ–Ω–∏–µ
            
        except Exception as e:
            return None
    
    def ultra_fast_stream_measurement(self, sensor_address: int, sensor_range_mm: float = 25.0, 
                                    duration: float = 10.0) -> None:
        """
        –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ~9480 –ì—Ü –ø—Ä–∏ 921600 baud
        
        Args:
            sensor_address: –ê–¥—Ä–µ—Å –¥–∞—Ç—á–∏–∫–∞ (1 –∏–ª–∏ 2)
            sensor_range_mm: –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç—á–∏–∫–∞ –≤ –º–º
            duration: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        print(f"\n{'='*60}")
        print(f"–£–õ–¨–¢–†–ê-–ë–´–°–¢–†–´–ô –†–ï–ñ–ò–ú –ü–û–¢–û–ö–ê –î–ê–ù–ù–´–•")
        print(f"–î–∞—Ç—á–∏–∫: {sensor_address} | –î–∏–∞–ø–∞–∑–æ–Ω: {sensor_range_mm} –º–º")
        print(f"–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ~9480 –ì—Ü")
        print(f"{'='*60}")
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
        if not self.start_stream_mode(sensor_address):
            return
        
        start_time = time.time()
        last_display = start_time
        measurement_count = 0
        valid_count = 0
        
        try:
            while (time.time() - start_time) < duration:
                # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Ç–æ–∫–∞
                measurement = self.read_stream_data(sensor_range_mm)
                measurement_count += 1
                
                if measurement is not None:
                    valid_count += 1
                    
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                current_time = time.time()
                if (current_time - last_display) >= 1.0:
                    elapsed = current_time - start_time
                    frequency = measurement_count / elapsed if elapsed > 0 else 0
                    success_rate = (valid_count / measurement_count * 100) if measurement_count > 0 else 0
                    
                    if measurement is not None:
                        print(f"–í—Ä–µ–º—è: {elapsed:5.1f}—Å | –ò–∑–º–µ—Ä–µ–Ω–∏–π: {measurement_count:6d} | "
                              f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency:7.1f} –ì—Ü | –£—Å–ø–µ—Ö: {success_rate:5.1f}% | "
                              f"–î–∞–Ω–Ω—ã–µ: {measurement:6.3f}–º–º")
                    else:
                        print(f"–í—Ä–µ–º—è: {elapsed:5.1f}—Å | –ò–∑–º–µ—Ä–µ–Ω–∏–π: {measurement_count:6d} | "
                              f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency:7.1f} –ì—Ü | –£—Å–ø–µ—Ö: {success_rate:5.1f}% | "
                              f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞...")
                    
                    last_display = current_time
                    
        except KeyboardInterrupt:
            print("\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        finally:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞
            self.stop_stream_mode(sensor_address)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            elapsed = time.time() - start_time
            avg_frequency = measurement_count / elapsed if elapsed > 0 else 0
            success_rate = (valid_count / measurement_count * 100) if measurement_count > 0 else 0
            
            print(f"\n{'='*60}")
            print(f"–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–¢–û–ö–û–í–û–ì–û –†–ï–ñ–ò–ú–ê")
            print(f"{'='*60}")
            print(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed:.1f} —Å–µ–∫")
            print(f"–í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: {measurement_count}")
            print(f"–í–∞–ª–∏–¥–Ω—ã—Ö: {valid_count}")
            print(f"–°—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç–æ—Ç–∞: {avg_frequency:.1f} –ì—Ü")
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
            print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∑–∞–ø—Ä–æ—Å–Ω—ã–º —Ä–µ–∂–∏–º–æ–º: {avg_frequency/31.3:.1f}x")
    

    def perform_quad_sensor_measurement(self, sensor1_range_mm: float = 25.0, 
                                       sensor2_range_mm: float = 25.0,
                                       sensor3_range_mm: float = 25.0,
                                       sensor4_range_mm: float = 25.0) -> Tuple[Optional[float], Optional[float], Optional[float], Optional[float]]:
        """
        –£–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä–æ–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Å —á–µ—Ç—ã—Ä–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤
        Broadcast —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å–æ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤
        
        Args:
            sensor1_range_mm: –î–∏–∞–ø–∞–∑–æ–Ω –ø–µ—Ä–≤–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ –≤ –º–º (25 –º–º)
            sensor2_range_mm: –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ç–æ—Ä–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ –≤ –º–º (25 –º–º)
            sensor3_range_mm: –î–∏–∞–ø–∞–∑–æ–Ω —Ç—Ä–µ—Ç—å–µ–≥–æ –¥–∞—Ç—á–∏–∫–∞ –≤ –º–º (25 –º–º)
            sensor4_range_mm: –î–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ –≤ –º–º (25 –º–º)
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–∏–∑–º–µ—Ä–µ–Ω–∏–µ_–¥–∞—Ç—á–∏–∫1_–º–º, –∏–∑–º–µ—Ä–µ–Ω–∏–µ_–¥–∞—Ç—á–∏–∫2_–º–º, –∏–∑–º–µ—Ä–µ–Ω–∏–µ_–¥–∞—Ç—á–∏–∫3_–º–º, –∏–∑–º–µ—Ä–µ–Ω–∏–µ_–¥–∞—Ç—á–∏–∫4_–º–º)
        """
        measurement_start = time.perf_counter()
        
        # 1. Broadcast –∫–æ–º–∞–Ω–¥–∞ –∑–∞—â–µ–ª–∫–∏–≤–∞–Ω–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö 4 –¥–∞—Ç—á–∏–∫–æ–≤
        self.send_broadcast_latch_command_fast()
        
        # 2. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        sync_start = time.perf_counter()
        time.sleep(0.00005)  # 50 –º–∫—Å - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        self.time_sync_delay = time.perf_counter() - sync_start
        
        # 3. –ë—ã—Å—Ç—Ä–æ–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ –≤—Å–µ—Ö —á–µ—Ç—ã—Ä–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤
        result1_raw = self.request_measurement_fast(1)
        result2_raw = self.request_measurement_fast(2)
        result3_raw = self.request_measurement_fast(3)
        result4_raw = self.request_measurement_fast(4)
        
        # 4. –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä—ã —Å –ø—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
        conversion_start = time.perf_counter()
        result1_mm = None
        result2_mm = None
        result3_mm = None
        result4_mm = None
        
        # –ü—Ä–µ–¥—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        sensor1_coeff = sensor1_range_mm / 16384.0
        sensor2_coeff = sensor2_range_mm / 16384.0
        sensor3_coeff = sensor3_range_mm / 16384.0
        sensor4_coeff = sensor4_range_mm / 16384.0
        BASE_DISTANCE = 20.0  # –º–º - –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –†–§602-20/25
        
        if result1_raw is not None:
            if result1_raw == 0:
                result1_mm = 0.0
            else:
                offset1 = result1_raw * sensor1_coeff
                result1_mm = BASE_DISTANCE + offset1
            
        if result2_raw is not None:
            if result2_raw == 0:
                result2_mm = 0.0
            else:
                offset2 = result2_raw * sensor2_coeff
                result2_mm = BASE_DISTANCE + offset2
            
        if result3_raw is not None:
            if result3_raw == 0:
                result3_mm = 0.0
            else:
                offset3 = result3_raw * sensor3_coeff
                result3_mm = BASE_DISTANCE + offset3
            
        if result4_raw is not None:
            if result4_raw == 0:
                result4_mm = 0.0
            else:
                offset4 = result4_raw * sensor4_coeff
                result4_mm = BASE_DISTANCE + offset4
        
        self.time_conversion = time.perf_counter() - conversion_start
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.measurement_count += 1
        self.timing_buffer.append(measurement_start)
        
        return result1_mm, result2_mm, result3_mm, result4_mm


def apply_system_optimizations():
    """
    –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π Windows –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    print("üîß –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –°–ò–°–¢–ï–ú–ù–´–• –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–∏–±–ª–∏–æ—Ç–µ–∫
    print(f"üìö –î–û–°–¢–£–ü–ù–´–ï –ë–ò–ë–õ–ò–û–¢–ï–ö–ò:")
    print(f"   psutil: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if HAS_PSUTIL else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   pyftdi: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if HAS_PYFTDI else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    if HAS_PYFTDI:
        ftdi_devices = detect_ftdi_devices()
        if ftdi_devices:
            print(f"   FTDI —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {len(ftdi_devices)} –Ω–∞–π–¥–µ–Ω–æ")
            for i, device in enumerate(ftdi_devices):
                print(f"     {i+1}. {device}")
        else:
            print(f"   FTDI —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã")
    print()
    
    # 1. –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞
    if HAS_PSUTIL:
        try:
            p = psutil.Process(os.getpid())
            p.nice(psutil.HIGH_PRIORITY_CLASS)
            print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {e}")
    else:
        print("‚ö†Ô∏è  psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –∏–∑–º–µ–Ω–µ–Ω")
    
    # 2. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Windows Timer Resolution (–¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏)
    print("üïê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–µ—Ä–∞ Windows...")
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ (1 –º—Å)
        result = ctypes.windll.winmm.timeBeginPeriod(1)
        if result == 0:  # TIMERR_NOERROR
            print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ (1 –º—Å)")
        else:
            print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞: {e}")
    
    # 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        ctypes.windll.kernel32.SetThreadExecutionState(0x80000001)  # ES_CONTINUOUS | ES_SYSTEM_REQUIRED
        print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º —Å–∏—Å—Ç–µ–º—ã")
    except:
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º")
    
    print("üöÄ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!\n")


def main():
    """–í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    apply_system_optimizations()
    
    print("=" * 70)
    print("–í–´–°–û–ö–û–°–ö–û–†–û–°–¢–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê –û–ü–†–ê–®–ò–í–ê–ù–ò–Ø –î–ê–¢–ß–ò–ö–û–í RIFTEK")
    print("–ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º (–æ–¥–∏–Ω –¥–∞—Ç—á–∏–∫) –∏ QUAD —Ä–µ–∂–∏–º (4 –¥–∞—Ç—á–∏–∫–∞)")
    print("=" * 70)
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
    print("1. –ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º (–æ–¥–∏–Ω –¥–∞—Ç—á–∏–∫, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å) - ~1000+ –ì—Ü")
    print("2. üÜï QUAD —Ä–µ–∂–∏–º (—á–µ—Ç—ã—Ä–µ –¥–∞—Ç—á–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ) - ~125 –ì—Ü")
    print("3. üìä –ì–†–ê–§–ò–ß–ï–°–ö–ò–ô —Ä–µ–∂–∏–º (QUAD —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)")
    print("4. üì± –ö–û–ú–ü–ê–ö–¢–ù–´–ô –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (–¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤)")
    print("5. üî¢ –ü–†–û–°–¢–û–ô —Ä–µ–∂–∏–º (5 –æ–∫–æ—à–µ–∫ —Å —á–∏—Å–ª–∞–º–∏, –ë–ï–ó –≥—Ä–∞—Ñ–∏–∫–æ–≤)")
    
    try:
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1-5): ").strip()
    except KeyboardInterrupt:
        print("\n–í—ã—Ö–æ–¥")
        return
        
    if choice == "1":
        # –ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—á–∏–∫ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞:")
        print("1. –î–∞—Ç—á–∏–∫ 1")
        print("2. –î–∞—Ç—á–∏–∫ 2")
        print("3. –î–∞—Ç—á–∏–∫ 3")
        print("4. –î–∞—Ç—á–∏–∫ 4")
        
        try:
            sensor_choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∞—Ç—á–∏–∫–∞ (1-4): ").strip()
            sensor_address = int(sensor_choice)
            if sensor_address not in [1, 2, 3, 4]:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–∞—Ç—á–∏–∫–∞")
                return
        except (ValueError, KeyboardInterrupt):
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
            return
            
    elif choice == "2":
        # QUAD —Ä–µ–∂–∏–º - —á–µ—Ç—ã—Ä–µ –¥–∞—Ç—á–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        pass  # –ù–∏—á–µ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        
    elif choice == "3":
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
        try:
            print("–ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            import subprocess
            import sys
            subprocess.run([sys.executable, "gui_sensors.py"])
            return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
            return
            
    elif choice == "4":
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
        try:
            print("–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            import subprocess
            import sys
            subprocess.run([sys.executable, "gui_sensors_compact.py"])
            return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
            return
            
    elif choice == "5":
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º —Å –æ–∫–æ—à–∫–∞–º–∏
        try:
            print("–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            import subprocess
            import sys
            subprocess.run([sys.executable, "gui_sensors_simple_optimized.py"])
            return
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
            return
        
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û–ô —Å–∫–æ—Ä–æ—Å—Ç–∏
    PORT = 'COM7'           # –í–∞—à COM –ø–æ—Ä—Ç (–¥–ª—è pyftdi –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'ftdi://ftdi:232h/1')
    BAUDRATE = 921600       # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø —Å–∫–æ—Ä–æ—Å—Ç—å RS485
    TIMEOUT = 0.002         # –ê–ì–†–ï–°–°–ò–í–ù–´–ô —Ç–∞–π–º–∞—É—Ç 2 –º—Å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏

    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞—Ç—á–∏–∫–æ–≤ –†–§602-20/25
    BASE_DISTANCE = 20.0    # –º–º - –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    SENSOR1_RANGE = 25.0    # –º–º - –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ—Ä–µ–Ω–∏—è
    SENSOR2_RANGE = 25.0    # –º–º - –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ—Ä–µ–Ω–∏—è
    SENSOR3_RANGE = 25.0    # –º–º - –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ—Ä–µ–Ω–∏—è
    SENSOR4_RANGE = 25.0    # –º–º - –¥–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ—Ä–µ–Ω–∏—è
    
    print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"  COM –ø–æ—Ä—Ç: {PORT}")
    print(f"  –°–∫–æ—Ä–æ—Å—Ç—å: {BAUDRATE} baud")
    print(f"  –ú–æ–¥–µ–ª—å –¥–∞—Ç—á–∏–∫–∞: –†–§602-20/25")
    print(f"  –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {BASE_DISTANCE} –º–º")  
    print(f"  –î–∏–∞–ø–∞–∑–æ–Ω –∏–∑–º–µ—Ä–µ–Ω–∏—è: {SENSOR1_RANGE} –º–º")
    print(f"  –†–∞–±–æ—á–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω: {BASE_DISTANCE} - {BASE_DISTANCE + SENSOR1_RANGE} –º–º")
    print(f"\nüîß –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –î–ê–¢–ß–ò–ö–û–í –î–õ–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –°–ö–û–†–û–°–¢–ò:")
    print(f"  üìä Maximum Exposure Time: 3 Œºs (–º–∏–Ω–∏–º—É–º!)")
    print(f"  üìä Sampling Period: 106 Œºs (–º–∏–Ω–∏–º—É–º –¥–ª—è 9.4 –∫–ì—Ü)")
    print(f"  üìä Hold Last Valid Reading: 0 ms (–û–¢–ö–õ–Æ–ß–ò–¢–¨!)")
    print(f"  üìä Averaging: –û–¢–ö–õ–Æ–ß–ï–ù–û (1 –∑–Ω–∞—á–µ–Ω–∏–µ)")
    print(f"  üìä Network Address: –î–∞—Ç—á–∏–∫ 1 = –∞–¥—Ä–µ—Å 1, –î–∞—Ç—á–∏–∫ 2 = –∞–¥—Ä–µ—Å 2")
    print(f"  üìä Baud Rate: 921600 (–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø!)")
    print(f"\nüöÄ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"  ‚úÖ –í—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞: 0.2-0.4 –º—Å –Ω–∞ –¥–∞—Ç—á–∏–∫ (–±—ã–ª–æ 1.0 –º—Å)")
    print(f"  ‚úÖ –û–±—â–∞—è —á–∞—Å—Ç–æ—Ç–∞: 700-1000+ –ì—Ü (–±—ã–ª–æ 500 –ì—Ü)")
    print(f"  ‚úÖ –£—Å–∫–æ—Ä–µ–Ω–∏–µ: –≤ 2-3 —Ä–∞–∑–∞!")
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞
    sensors = HighSpeedRiftekSensor(PORT, BAUDRATE, TIMEOUT)
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not sensors.connect():
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–∞—Ç—á–∏–∫–∞–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å COM –ø–æ—Ä—Ç–∞")
        print("2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–±–µ–ª—è RS485")
        print("3. –ü–∏—Ç–∞–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤")
        return
    
    try:
        if choice == "1":
            # –ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º - —É–ª—å—Ç—Ä–∞-–±—ã—Å—Ç—Ä—ã–π
            print(f"–ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ {sensor_address}")
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
            if sensor_address in [1, 2]:
                sensors.ultra_fast_stream_measurement(sensor_address, SENSOR1_RANGE, duration=30.0)
            else:
                sensors.ultra_fast_stream_measurement(sensor_address, SENSOR3_RANGE, duration=30.0)
            
        elif choice == "2":
            # QUAD —Ä–µ–∂–∏–º - —á–µ—Ç—ã—Ä–µ –¥–∞—Ç—á–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            print("üÜï QUAD –†–ï–ñ–ò–ú - –ß–ï–¢–´–†–ï –î–ê–¢–ß–ò–ö–ê –°–ò–ù–•–†–û–ù–ù–û")
            print("Broadcast —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è 4 –¥–∞—Ç—á–∏–∫–æ–≤ - –æ–∂–∏–¥–∞–µ–º–∞—è —á–∞—Å—Ç–æ—Ç–∞ ~125 –ì—Ü")
            print("–ê–¥—Ä–µ—Å–∞ –¥–∞—Ç—á–∏–∫–æ–≤: 1, 2, 3, 4")
            print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
            
            display_counter = 0
            last_display_time = time.time()
            measurements_for_freq = deque(maxlen=50)
            
            try:
                while True:
                    cycle_start = time.time()
                    
                    # Quad –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Å 4 –¥–∞—Ç—á–∏–∫–æ–≤
                    sensor1_mm, sensor2_mm, sensor3_mm, sensor4_mm = sensors.perform_quad_sensor_measurement(
                        SENSOR1_RANGE, SENSOR2_RANGE, SENSOR3_RANGE, SENSOR4_RANGE
                    )
                    
                    measurements_for_freq.append(cycle_start)
                    display_counter += 1
                    current_time = time.time()
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ—è –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                    if display_counter >= 100 or (current_time - last_display_time) >= 0.5:
                        
                        # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
                        if len(measurements_for_freq) >= 2:
                            time_span = measurements_for_freq[-1] - measurements_for_freq[0]
                            if time_span > 0:
                                instant_freq = (len(measurements_for_freq) - 1) / time_span
                            else:
                                instant_freq = 0
                        else:
                            instant_freq = 0
                        
                        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        total_measurements = sensors.measurement_count
                        total_errors = sensors.error_count
                        success_rate = ((total_measurements - total_errors) / total_measurements * 100) if total_measurements > 0 else 0
                        
                        print(f"–ò–∑–º–µ—Ä–µ–Ω–∏–π: {total_measurements:5d} | –ß–∞—Å—Ç–æ—Ç–∞: {instant_freq:6.1f} –ì—Ü | –£—Å–ø–µ—Ö: {success_rate:5.1f}%")
                        
                        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —ç—Ç–∞–ø–æ–≤ –¥–ª—è 4 –¥–∞—Ç—á–∏–∫–æ–≤
                        print(f"–í—Ä–µ–º—è —ç—Ç–∞–ø–æ–≤ (–º—Å): BC:{sensors.time_broadcast*1000:.2f} | "
                              f"Sync:{sensors.time_sync_delay*1000:.2f}")
                        print(f"  –î–∞—Ç—á–∏–∫–∏: S1:{sensors.time_sensor1*1000:.2f} | S2:{sensors.time_sensor2*1000:.2f} | "
                              f"S3:{sensors.time_sensor3*1000:.2f} | S4:{sensors.time_sensor4*1000:.2f}")
                        
                        if all(v is not None for v in [sensor1_mm, sensor2_mm, sensor3_mm, sensor4_mm]):
                            # –†–∞—Å—á–µ—Ç –¥–µ–ª—å—Ç –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –¥–∞—Ç—á–∏–∫–æ–≤ (1-2 –∏ 3-4)
                            delta_1_2 = abs(sensor1_mm - sensor2_mm)
                            delta_3_4 = abs(sensor3_mm - sensor4_mm)
                            
                            print(f"–ü–∞—Ä–∞ 1-2: –î1:{sensor1_mm:6.3f}–º–º | –î2:{sensor2_mm:6.3f}–º–º | Œî1-2:{delta_1_2:6.3f}–º–º")
                            print(f"–ü–∞—Ä–∞ 3-4: –î3:{sensor3_mm:6.3f}–º–º | –î4:{sensor4_mm:6.3f}–º–º | Œî3-4:{delta_3_4:6.3f}–º–º")
                        else:
                            print("–û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø –û–î–ù–û–ì–û –ò–õ–ò –ë–û–õ–ï–ï –î–ê–¢–ß–ò–ö–û–í")
                        
                        print()
                        
                        display_counter = 0
                        last_display_time = current_time
                    
            except KeyboardInterrupt:
                print("\n\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ QUAD —Ä–µ–∂–∏–º–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
    except KeyboardInterrupt:
        print("\n\n–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    finally:
        try:
            sensors.disconnect()
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª
        if sensors.measurement_count > 50:
            try:
                filename = f"high_speed_measurements_{int(time.time())}.csv"
                with open(filename, 'w') as f:
                    f.write("timestamp,measurement_count,error_count\n")
                    f.write(f"{time.time()},{sensors.measurement_count},{sensors.error_count}\n")
                print(f"–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")


def print_optimization_guide():
    """
    –ü–µ—á–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã
    """
    print("""
""")


def cleanup_system_optimizations():
    """
    –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    """
    try:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        ctypes.windll.winmm.timeEndPeriod(1)
        print("üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞")
    except:
        pass
    
    try:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º
        ctypes.windll.kernel32.SetThreadExecutionState(0x80000000)  # ES_CONTINUOUS
        print("üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º")
    except:
        pass


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        cleanup_system_optimizations()
        print("\n" + "="*70)
        print("–ü–†–û–ì–†–ê–ú–ú–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("="*70)
    
    print_optimization_guide()
