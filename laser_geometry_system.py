#!/usr/bin/env python3
"""
 –û–°–ù–û–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –õ–ê–ó–ï–†–ù–û–ô –ì–ï–û–ú–ï–¢–†–ò–ò
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ –†–§602, Modbus —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
"""

import time
import threading
import struct
import os
import ctypes
from enum import Enum
from typing import Optional, Tuple, List
from collections import deque

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å psutil
try:
    import psutil
    HAS_PSUTIL = True
except ImportError:
    HAS_PSUTIL = False

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
from main import HighSpeedRiftekSensor, apply_system_optimizations
from modbus_slave_server import ModbusSlaveServer
from modbus_debug_gui import ModbusDebugGUI
from modbus_database_integration import ModbusDatabaseIntegration


def apply_laser_system_optimizations():
    """
    –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –¥–ª—è –ª–∞–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–±–µ–∑ pyftdi)
    """
    print("[SYSTEM] –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –°–ò–°–¢–ï–ú–ù–´–• –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ô...")
    
    # 1. –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞
    if HAS_PSUTIL:
        try:
            p = psutil.Process(os.getpid())
            p.nice(psutil.HIGH_PRIORITY_CLASS)
            print("[OK] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞")
        except Exception as e:
            print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {e}")
    else:
        print("[WARNING] psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –∏–∑–º–µ–Ω–µ–Ω")
    
    # 2. –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ Windows
    print("[TIMER] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ç–∞–π–º–µ—Ä–∞ Windows...")
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ (1 –º—Å)
        result = ctypes.windll.winmm.timeBeginPeriod(1)
        if result == 0:  # TIMERR_NOERROR
            print("[OK] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ (1 –º—Å)")
        else:
            print(f"[WARNING] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞: {result}")
    except Exception as e:
        print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–π–º–µ—Ä: {e}")
    
    # 3. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–ø—è—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        ctypes.windll.kernel32.SetThreadExecutionState(0x80000001)  # ES_CONTINUOUS | ES_SYSTEM_REQUIRED
        print("[OK] –û—Ç–∫–ª—é—á–µ–Ω —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º —Å–∏—Å—Ç–µ–º—ã")
    except Exception as e:
        print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º: {e}")
    
    print("[SYSTEM] –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã\n")


def cleanup_laser_system_optimizations():
    """
    –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    """
    try:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        ctypes.windll.winmm.timeEndPeriod(1)
        print("üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞")
    except:
        pass
    
    try:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º
        ctypes.windll.kernel32.SetThreadExecutionState(0x80000000)  # ES_CONTINUOUS
        print("üîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏–µ–º")
    except:
        pass


class SystemState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    IDLE = "IDLE"
    
    # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∏
    CALIBRATE_WALL = "CALIBRATE_WALL"
    CALIBRATE_BOTTOM = "CALIBRATE_BOTTOM"
    CALIBRATE_FLANGE = "CALIBRATE_FLANGE"
    CALIBRATE_HEIGHT = "CALIBRATE_HEIGHT"
    DEBUG_REGISTERS = "DEBUG_REGISTERS"
    
    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã
    MEASURE_HEIGHT_PROCESS = "MEASURE_HEIGHT_PROCESS"      # CMD=9: –ø–æ–∏—Å–∫ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–∑–º–µ—Ä–µ–Ω–∏—è - –≤–µ—Ä—Ö–Ω—è—è —Å—Ç–µ–Ω–∫–∞
    MEASURE_WALL_PROCESS = "MEASURE_WALL_PROCESS"      # CMD=10: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    MEASURE_WALL_CALCULATE = "MEASURE_WALL_CALCULATE"  # CMD=11: –ø–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–∑–º–µ—Ä–µ–Ω–∏—è - —Ñ–ª–∞–Ω–µ—Ü
    MEASURE_FLANGE_PROCESS = "MEASURE_FLANGE_PROCESS"      # CMD=12: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    MEASURE_FLANGE_CALCULATE = "MEASURE_FLANGE_CALCULATE"  # CMD=13: –ø–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–∑–º–µ—Ä–µ–Ω–∏—è - –Ω–∏–∂–Ω—è—è —Å—Ç–µ–Ω–∫–∞
    MEASURE_BOTTOM_PROCESS = "MEASURE_BOTTOM_PROCESS"      # CMD=14: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    MEASURE_BOTTOM_CALCULATE = "MEASURE_BOTTOM_CALCULATE"  # CMD=15: –ø–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–¥–µ–ª–∏—è
    QUALITY_EVALUATION = "QUALITY_EVALUATION"  # CMD=16: –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    
    # –ü–æ—Ç–æ–∫–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã
    STREAM_SENSOR1 = "STREAM_SENSOR1"
    STREAM_SENSOR2 = "STREAM_SENSOR2"
    STREAM_SENSOR3 = "STREAM_SENSOR3"
    STREAM_SENSOR4 = "STREAM_SENSOR4"
    
    ERROR = "ERROR"


class LaserGeometrySystem:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–∞–∑–µ—Ä–Ω–æ–π –≥–µ–æ–º–µ—Ç—Ä–∏–∏"""
    
    def __init__(self, port: str = 'COM11', baudrate: int = 921600, modbus_port: int = 502, 
                 test_mode: bool = False, enable_debug_gui: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            port: COM –ø–æ—Ä—Ç –¥–ª—è –¥–∞—Ç—á–∏–∫–æ–≤
            baudrate: –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
            modbus_port: –ü–æ—Ä—Ç Modbus —Å–µ—Ä–≤–µ—Ä–∞
            test_mode: –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤
            enable_debug_gui: –í–∫–ª—é—á–∏—Ç—å GUI –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Modbus
        """
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—Ç—á–∏–∫–æ–≤
        self.port = port
        self.baudrate = baudrate
        self.test_mode = test_mode
        self.enable_debug_gui = enable_debug_gui
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.sensors = None
        self.modbus_server = None
        self.debug_gui = None
        self.db_integration = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.current_state = SystemState.IDLE
        self.previous_cmd = 0
        
        # –î–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.calibration_data = {
            'wall_distance_1_2': 0.0,  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏ 1,2
            'wall_distance_1_3': 0.0,  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏ 1,3
            'bottom_distance_4': 0.0,  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫ 4 –¥–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
            'flange_distance_1_center': 0.0,  # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫ 1 –¥–æ —Ü–µ–Ω—Ç—Ä–∞
        }
        
        # –ë—É—Ñ–µ—Ä—ã –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        self.measurement_buffer = {
            'sensor1': deque(maxlen=1000),
            'sensor2': deque(maxlen=1000),
            'sensor3': deque(maxlen=1000),
            'sensor4': deque(maxlen=1000),
        }
        
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π
        self.measurement_duration = 4.0  # —Å–µ–∫—É–Ω–¥ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        self.sensor_range_mm = 25.0      # –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç—á–∏–∫–æ–≤
        self.base_distance_mm = 20.0     # –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        
        # –§–ª–∞–≥–∏
        self.is_running = False
        self.calibration_in_progress = False
        self.stream_active_sensor1 = False
        self.stream_active_sensor2 = False
        self.stream_active_sensor3 = False
        self.stream_active_sensor4 = False
        self.height_calibration_nonzero_count = 0  # –°—á–µ—Ç—á–∏–∫ –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–ª—è CMD=103
        self.distance_to_plane_calculated = False  # –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—á—ë—Ç–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ (CMD=103)
        self.recent_measurements = []  # –ë—É—Ñ–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è CMD=103
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.stream_measurement_count = 0
        self.stream_start_time = None
        self.stream_measurements_buffer = []  # –ë—É—Ñ–µ—Ä –∏–∑–º–µ—Ä–µ–Ω–∏–π –∑–∞ —Å–µ–∫—É–Ω–¥—É
        
        # –ë—É—Ñ–µ—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        self.sensor1_measurements = []  # –ë—É—Ñ–µ—Ä —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 1
        self.sensor2_measurements = []  # –ë—É—Ñ–µ—Ä —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 2
        self.wall_thickness_buffer = []  # –ë—É—Ñ–µ—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã —Å—Ç–µ–Ω–∫–∏
        self.measurement_cycle_active = False  # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        
        # –§–ª–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ)
        self.wall_calculated = False
        self.flange_calculated = False
        self.bottom_calculated = False
        self.quality_evaluated = False
        
        # –ö–µ—à –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π (–¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ü–∏–∫–ª–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è)
        self.cached_distance_1_2 = None
        self.cached_distance_to_center = None
        self.cached_distance_1_3 = None
        self.cached_distance_sensor4 = None
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤
        self.current_shift_number = 1  # –¢–µ–∫—É—â–∞—è —Å–º–µ–Ω–∞
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Å—Ç–æ—Ç—ã –æ–ø—Ä–æ—Å–∞
        self.frequency_counter = 0
        self.frequency_start_time = None
        self.last_frequency_display = 0
        
        # –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã (–∫–æ–º–∞–Ω–¥–∞ 9)
        self.height_measurements = []  # –ë—É—Ñ–µ—Ä –∏–∑–º–µ—Ä–µ–Ω–∏–π –≤—ã—Å–æ—Ç—ã
        self.obstacle_detected = False  # –§–ª–∞–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        self.obstacle_filter_count = 0  # –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        self.height_calculated = False  # –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Å–æ—Ç—ã
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (–∫–æ–º–∞–Ω–¥–∞ 10)
        self.temp_sensor1_buffer = []  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 1
        self.temp_sensor2_buffer = []  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 2
        
        # –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 11 (–∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ñ–ª–∞–Ω—Ü–∞)
        self.sensor1_flange_measurements = []  # –ë—É—Ñ–µ—Ä —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 1 –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 11
        self.sensor3_measurements = []  # –ë—É—Ñ–µ—Ä —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 3
        self.sensor4_measurements = []  # –ë—É—Ñ–µ—Ä —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 4
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (–∫–æ–º–∞–Ω–¥–∞ 11)
        self.temp_sensor1_flange_buffer = []  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 1 (–∫–æ–º–∞–Ω–¥–∞ 11)
        self.temp_sensor3_buffer = []  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 3
        self.temp_sensor4_buffer = []  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 4
        
        # –†–∞—Å—á–µ—Ç–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 11
        self.body_diameter_buffer = []    # –ë—É—Ñ–µ—Ä –¥–∏–∞–º–µ—Ç—Ä–∞ –∫–æ—Ä–ø—É—Å–∞ (–¥–∞—Ç—á–∏–∫ 1)
        self.flange_diameter_buffer = []  # –ë—É—Ñ–µ—Ä –¥–∏–∞–º–µ—Ç—Ä–∞ —Ñ–ª–∞–Ω—Ü–∞ (–¥–∞—Ç—á–∏–∫ 3)
        self.flange_thickness_buffer = [] # –ë—É—Ñ–µ—Ä —Ç–æ–ª—â–∏–Ω—ã —Ñ–ª–∞–Ω—Ü–∞ (–¥–∞—Ç—á–∏–∫–∏ 1,3)
        self.bottom_thickness_buffer = [] # –ë—É—Ñ–µ—Ä —Ç–æ–ª—â–∏–Ω—ã –¥–Ω–∞ (–¥–∞—Ç—á–∏–∫ 4)
        
        # –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 12 (–∏–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏)
        self.sensor1_bottom_measurements = []  # –ë—É—Ñ–µ—Ä —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 1 –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 12
        self.sensor2_bottom_measurements = []  # –ë—É—Ñ–µ—Ä —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 2 –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 12
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (–∫–æ–º–∞–Ω–¥–∞ 12)
        self.temp_sensor1_bottom_buffer = []  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 1 (–∫–æ–º–∞–Ω–¥–∞ 12)
        self.temp_sensor2_bottom_buffer = []  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 2 (–∫–æ–º–∞–Ω–¥–∞ 12)
        
        # –†–∞—Å—á–µ—Ç–Ω—ã–π –±—É—Ñ–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 12
        self.bottom_wall_thickness_buffer = []  # –ë—É—Ñ–µ—Ä —Ç–æ–ª—â–∏–Ω—ã –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
        
    def start_system(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        print("–ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –õ–ê–ó–ï–†–ù–û–ô –ì–ï–û–ú–ï–¢–†–ò–ò")
        print("=" * 50)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ª–∞–∑–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        apply_laser_system_optimizations()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
        if self.test_mode:
            print("–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –¥–∞—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            self.sensors = None
        else:
            print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞—Ç—á–∏–∫–∞–º –Ω–∞ –ø–æ—Ä—Ç—É {self.port}...")
            self.sensors = HighSpeedRiftekSensor(self.port, self.baudrate, timeout=0.002)
            
            if not self.sensors.connect():
                print(" –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¥–∞—Ç—á–∏–∫–∞–º!")
                return False
                
        print("OK –î–∞—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Modbus —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ GUI, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –µ—Å—Ç—å Debug GUI)
        self.modbus_server = ModbusSlaveServer(enable_gui=False)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Modbus —Å–µ—Ä–≤–µ—Ä –±–µ–∑ GUI
        try:
            self.modbus_server.start_modbus_server()
            print("OK Modbus —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Modbus —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        self.db_integration = ModbusDatabaseIntegration(self.modbus_server)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.db_integration.load_all_registers_from_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        self.db_integration.start_monitoring(interval=1.0)
        print("OK –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Debug GUI (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if self.enable_debug_gui:
            # –ü–µ—Ä–µ–¥–∞–µ–º Modbus —Å–µ—Ä–≤–µ—Ä —Å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ë–î
            self.modbus_server.db_integration = self.db_integration
            self.debug_gui = ModbusDebugGUI(self.modbus_server)
            print("OK Debug GUI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ë–î")
        
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.is_running = True
        main_thread = threading.Thread(target=self.main_loop, daemon=True)
        main_thread.start()
        print("OK –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ Debug GUI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        if self.enable_debug_gui and self.debug_gui:
            print("OK Debug GUI –∑–∞–ø—É—â–µ–Ω")
            self.debug_gui.start()  # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        else:
            # –ï—Å–ª–∏ GUI –Ω–µ –Ω—É–∂–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            main_thread.join()
        
        return True
    
    def stop_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("\n –û–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´")
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤—ã—Ö —Ä–µ–∂–∏–º–æ–≤
        if self.sensors and self.stream_active_sensor1:
            try:
                self.sensors.stop_stream_mode(1)
                self.stream_active_sensor1 = False
                print(" –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–∞—Ç—á–∏–∫–∞ 1")
            except Exception as e:
                print(f" –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–∞—Ç—á–∏–∫–∞ 1: {e}")
        
        if self.sensors and self.stream_active_sensor2:
            try:
                self.sensors.stop_stream_mode(2)
                self.stream_active_sensor2 = False
                print(" –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–∞—Ç—á–∏–∫–∞ 2")
            except Exception as e:
                print(f" –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–∞—Ç—á–∏–∫–∞ 2: {e}")
        
        if self.sensors and self.stream_active_sensor3:
            try:
                self.sensors.stop_stream_mode(3)
                self.stream_active_sensor3 = False
                print(" –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–∞—Ç—á–∏–∫–∞ 3")
            except Exception as e:
                print(f" –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–∞—Ç—á–∏–∫–∞ 3: {e}")
        
        if self.sensors and self.stream_active_sensor4:
            try:
                self.sensors.stop_stream_mode(4)
                self.stream_active_sensor4 = False
                print(" –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–∞—Ç—á–∏–∫–∞ 4")
            except Exception as e:
                print(f" –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–∞—Ç—á–∏–∫–∞ 4: {e}")
        
        if self.sensors:
            try:
                self.sensors.disconnect()
                print(" –î–∞—Ç—á–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            except Exception as e:
                print(f" –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤: {e}")
            finally:
                self.sensors = None
            
        if self.db_integration:
            try:
                self.db_integration.stop_monitoring()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ë–î: {e}")
            
        if self.modbus_server:
            try:
                self.modbus_server.stop_modbus_server()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Modbus —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            
        if self.debug_gui:
            self.debug_gui.close_gui()
        
        # –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        cleanup_laser_system_optimizations()
            
        print(" –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏—Å—Ç–µ–º—ã"""
        print(" –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        try:
            while self.is_running:
                # –ü–†–û–í–ï–†–ö–ê –°–ë–†–û–°–ê –û–®–ò–ë–û–ö (—Ä–µ–≥–∏—Å—Ç—Ä 40024)
                try:
                    reset_flag = self.modbus_server.slave_context.getValues(3, 23, 1)[0]  # 40024 -> index 23
                    if reset_flag == 1:
                        print(" [RESET] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –æ—à–∏–±–æ–∫ (40024=1)")
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ 0
                        self.modbus_server.slave_context.setValues(4, 8, [0])  # 30009 -> index 8
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–±—Ä–æ—Å–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ 0
                        self.modbus_server.slave_context.setValues(3, 23, [0])  # 40024 -> index 23
                        print(" [RESET] –°—Ç–∞—Ç—É—Å 30009 —Å–±—Ä–æ—à–µ–Ω –≤ 0, —Ñ–ª–∞–≥ 40024 —Å–±—Ä–æ—à–µ–Ω")
                except Exception as e:
                    print(f" –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Å–±—Ä–æ—Å–∞ 40024: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç Modbus
                current_cmd = self.get_current_command()
                
                if current_cmd != self.previous_cmd:
                    print(f"üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {current_cmd}")
                    self.handle_command(current_cmd)
                    self.previous_cmd = current_cmd
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
                self.execute_state_actions()
                
                # –ü–∞—É–∑–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º (–∏–Ω–∞—á–µ —Ç–æ—Ä–º–æ–∑–∏—Ç –ø–æ—Ç–æ–∫!)
                if self.current_state not in [SystemState.STREAM_SENSOR1, SystemState.STREAM_SENSOR2, 
                                             SystemState.STREAM_SENSOR3, SystemState.STREAM_SENSOR4, 
                                             SystemState.MEASURE_HEIGHT_PROCESS, SystemState.MEASURE_WALL_PROCESS, 
                                             SystemState.MEASURE_FLANGE_PROCESS, SystemState.MEASURE_BOTTOM_PROCESS,
                                             SystemState.CALIBRATE_HEIGHT]:
                    time.sleep(0.1)
                
        except KeyboardInterrupt:
            print("\n –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            self.current_state = SystemState.ERROR
        finally:
            self.stop_system()
    
    def get_current_command(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã –∏–∑ Modbus —Ä–µ–≥–∏—Å—Ç—Ä–∞ 40001"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                values = self.modbus_server.slave_context.getValues(3, 1, 1)  # Holding Register 40001
                if values:
                    return int(values[0])
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        return 0
    
    def handle_command(self, cmd: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–º–∞–Ω–¥—ã
        self.stop_all_streams()
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–º —Ü–∏–∫–ª–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (—Ä–µ–≥–∏—Å—Ç—Ä 30009)
        self.manage_measurement_cycle_flag(cmd)
        
        if cmd == 0:
            self.current_state = SystemState.IDLE
            
        # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∏
        elif cmd == 100:
            self.current_state = SystemState.CALIBRATE_WALL
        elif cmd == 101:
            self.current_state = SystemState.CALIBRATE_BOTTOM
        elif cmd == 102:
            self.current_state = SystemState.CALIBRATE_FLANGE
        elif cmd == 103:
            self.current_state = SystemState.CALIBRATE_HEIGHT
        elif cmd == 104:
            self.current_state = SystemState.DEBUG_REGISTERS
            
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
        elif cmd == 10:
            self.current_state = SystemState.MEASURE_WALL_PROCESS
            
        # –ü–æ—Ç–æ–∫–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã
        elif cmd == 200:
            self.current_state = SystemState.STREAM_SENSOR1
        elif cmd == 201:
            self.current_state = SystemState.STREAM_SENSOR2
        elif cmd == 202:
            self.current_state = SystemState.STREAM_SENSOR3
        elif cmd == 203:
            self.current_state = SystemState.STREAM_SENSOR4
            
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–∑–º–µ—Ä–µ–Ω–∏—è - –ø–æ–¥—Å—á—ë—Ç –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
        elif cmd == 11:
            self.current_state = SystemState.MEASURE_WALL_CALCULATE
            
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–∑–º–µ—Ä–µ–Ω–∏—è - —Ñ–ª–∞–Ω–µ—Ü
        elif cmd == 12:
            self.current_state = SystemState.MEASURE_FLANGE_PROCESS
        elif cmd == 13:
            self.current_state = SystemState.MEASURE_FLANGE_CALCULATE
            
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–∑–º–µ—Ä–µ–Ω–∏—è - –Ω–∏–∂–Ω—è—è —Å—Ç–µ–Ω–∫–∞
        elif cmd == 14:
            self.current_state = SystemState.MEASURE_BOTTOM_PROCESS
        elif cmd == 15:
            self.current_state = SystemState.MEASURE_BOTTOM_CALCULATE
            
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–¥–µ–ª–∏—è
        elif cmd == 16:
            self.current_state = SystemState.QUALITY_EVALUATION
            
        else:
            print(f" –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {cmd}")
            self.current_state = SystemState.ERROR
        
        print(f" –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.current_state.value}")
    
    def manage_measurement_cycle_flag(self, new_cmd: int):
        """
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–º —Ü–∏–∫–ª–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä–µ 30009
        
        –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤:
        0   - –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ
        10  - –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
        11  - –ø–æ–¥—Å—á—ë—Ç –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
        110 - –ø–æ–¥—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –≥–æ—Ç–æ–≤ –∫ CMD=12
        12  - –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ñ–ª–∞–Ω—Ü–∞
        13  - –ø–æ–¥—Å—á—ë—Ç —Ñ–ª–∞–Ω—Ü–∞
        112 - –ø–æ–¥—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –≥–æ—Ç–æ–≤ –∫ CMD=14
        14  - –∏–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
        15  - –ø–æ–¥—Å—á—ë—Ç –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
        114 - –ø–æ–¥—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –≥–æ—Ç–æ–≤ –∫ CMD=16
        16  - –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        116 - –æ—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≥–æ—Ç–æ–≤ –∫ CMD=0
        -1  - –æ—à–∏–±–∫–∞
        """
        try:
            if not self.modbus_server or not self.modbus_server.slave_context:
                return
                
            current_state_value = self.current_state.value if hasattr(self.current_state, 'value') else str(self.current_state)
            
            # === –ö–ê–õ–ò–ë–†–û–í–ö–ê –í–´–°–û–¢–´ (CMD=103) ===
            if current_state_value == "IDLE" and new_cmd == 103:
                # 0 ‚Üí 103: –Ω–∞—á–∞–ª–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤—ã—Å–æ—Ç—ã (–ø–æ–∏—Å–∫ 3 –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 1)
                self.write_cycle_flag(103)
                self.clear_measurement_buffers()
                self.height_calibration_nonzero_count = 0
                self.distance_to_plane_calculated = False
                self.recent_measurements = []
                print(" [0‚Üí103] –ù–∞—á–∞–ª–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤—ã—Å–æ—Ç—ã: –ø–æ–∏—Å–∫ 3 –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 1")
            
            # === –ö–ê–õ–ò–ë–†–û–í–ö–ò –°–¢–ï–ù–ö–ò/–î–ù–ê/–§–õ–ê–ù–¶–ê (100/101/102) ===
            elif current_state_value == "IDLE" and new_cmd in [100, 101, 102]:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–≤–Ω—ã–º –Ω–æ–º–µ—Ä—É –∫–æ–º–∞–Ω–¥—ã
                self.write_cycle_flag(new_cmd)
                self.clear_measurement_buffers()
                print(f" [0‚Üí{new_cmd}] –ù–∞—á–∞–ª–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
            
            # === –ù–ê–ß–ê–õ–û –¶–ò–ö–õ–ê –ò–ó–ú–ï–†–ï–ù–ò–ô ===
            elif current_state_value == "IDLE" and new_cmd == 10:
                # 0 ‚Üí 10: –Ω–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
                self.write_cycle_flag(10)
                self.measurement_cycle_active = True
                self.clear_measurement_buffers()
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤
                self.wall_calculated = False
                self.flange_calculated = False
                self.bottom_calculated = False
                self.quality_evaluated = False
                # –û—á–∏—â–∞–µ–º –∫–µ—à –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
                self.cached_distance_1_2 = None
                self.cached_distance_to_center = None
                self.cached_distance_1_3 = None
                self.cached_distance_sensor4 = None
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —á–∞—Å—Ç–æ—Ç—ã
                self.frequency_counter = 0
                self.frequency_start_time = None
                self.last_frequency_display = 0
                print(" [0‚Üí10] –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞: –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏")
            
            # === –í–ï–†–•–ù–Ø–Ø –°–¢–ï–ù–ö–ê ===
            elif current_state_value == "MEASURE_WALL_PROCESS" and new_cmd == 11:
                # 10 ‚Üí 11: –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–æ–¥—Å—á—ë—Ç –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
                self.write_cycle_flag(11)
                print(" [10‚Üí11] –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏...")
                
            elif current_state_value == "MEASURE_WALL_CALCULATE" and new_cmd == 12:
                # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥—Å—á—ë—Ç–∞, HMI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç CMD=12
                self.write_cycle_flag(12)
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞—Å—á—ë—Ç–∞ —Ñ–ª–∞–Ω—Ü–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
                self.flange_calculated = False
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞
                self.frequency_counter = 0
                self.frequency_start_time = None
                self.last_frequency_display = 0
                # –û—á–∏—â–∞–µ–º –∫–µ—à –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–µ–∂–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                self.cached_distance_to_center = None
                self.cached_distance_1_3 = None
                self.cached_distance_sensor4 = None
                print(" [11‚Üí12] –ü–æ–¥—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ñ–ª–∞–Ω—Ü–∞, –∫–µ—à –æ—á–∏—â–µ–Ω")
            
            # === –§–õ–ê–ù–ï–¶ ===
            elif current_state_value == "MEASURE_FLANGE_PROCESS" and new_cmd == 13:
                # 12 ‚Üí 13: –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–æ–¥—Å—á—ë—Ç —Ñ–ª–∞–Ω—Ü–∞
                self.write_cycle_flag(13)
                print(" [12‚Üí13] –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–ª–∞–Ω—Ü–∞...")
                
            elif current_state_value == "MEASURE_FLANGE_CALCULATE" and new_cmd == 14:
                # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥—Å—á—ë—Ç–∞, HMI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç CMD=14
                self.write_cycle_flag(14)
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞—Å—á—ë—Ç–∞ –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
                self.bottom_calculated = False
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞
                self.frequency_counter = 0
                self.frequency_start_time = None
                self.last_frequency_display = 0
                print(" [13‚Üí14] –ü–æ–¥—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏")
            
            # === –ù–ò–ñ–ù–Ø–Ø –°–¢–ï–ù–ö–ê ===
            elif current_state_value == "MEASURE_BOTTOM_PROCESS" and new_cmd == 15:
                # 14 ‚Üí 15: –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–æ–¥—Å—á—ë—Ç –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
                self.write_cycle_flag(15)
                print(" [14‚Üí15] –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏...")
                
            elif current_state_value == "MEASURE_BOTTOM_CALCULATE" and new_cmd == 16:
                # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥—Å—á—ë—Ç–∞, HMI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç CMD=16
                self.write_cycle_flag(16)
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
                self.quality_evaluated = False
                print(" [15‚Üí16] –ü–æ–¥—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–∞—á–∞–ª–æ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
            
            # === –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê ===
            elif current_state_value == "QUALITY_EVALUATION" and new_cmd == 0:
                # 16 ‚Üí 0: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ IDLE
                self.write_cycle_flag(0)
                self.measurement_cycle_active = False
                self.clear_measurement_buffers()
                print(" [16‚Üí0] –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω, –≤–æ–∑–≤—Ä–∞—Ç –≤ IDLE")

            # === –ó–ê–í–ï–†–®–ï–ù–ò–ï –ö–ê–õ–ò–ë–†–û–í–ö–ò –í–´–°–û–¢–´ ===
            elif current_state_value == "CALIBRATE_HEIGHT" and new_cmd == 0:
                # 103 ‚Üí 0: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤—ã—Å–æ—Ç—ã
                self.write_cycle_flag(0)
                self.clear_measurement_buffers()
                print(" [103‚Üí0] –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤—ã—Å–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—Ç –≤ IDLE")
            
            # === –ó–ê–í–ï–†–®–ï–ù–ò–ï –û–¢–õ–ê–î–ö–ò –†–ï–ì–ò–°–¢–†–û–í ===
            elif current_state_value == "DEBUG_REGISTERS" and new_cmd == 0:
                # 104 ‚Üí 0: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏
                self.write_cycle_flag(0)
                self.clear_measurement_buffers()
                # –û—á–∏—â–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –æ—Ç–ª–∞–¥–∫–∏
                if hasattr(self, 'debug_start_time'):
                    delattr(self, 'debug_start_time')
                if hasattr(self, 'debug_last_display'):
                    delattr(self, 'debug_last_display')
                print(" [104‚Üí0] –û—Ç–ª–∞–¥–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—Ç –≤ IDLE")
            
            # === –ó–ê–í–ï–†–®–ï–ù–ò–ï –ö–ê–õ–ò–ë–†–û–í–û–ö 100/101/102 ===
            elif current_state_value in ["CALIBRATE_WALL", "CALIBRATE_BOTTOM", "CALIBRATE_FLANGE"] and new_cmd == 0:
                self.write_cycle_flag(0)
                self.clear_measurement_buffers()
                print(f" [{current_state_value}‚Üí0] –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—Ç –≤ IDLE")
            
            # === –ü–†–ï–†–´–í–ê–ù–ò–ï –¶–ò–ö–õ–ê (–û–®–ò–ë–ö–ò) ===
            elif new_cmd == 0 and self.measurement_cycle_active:
                # –õ—é–±–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ 0 –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ (–∫—Ä–æ–º–µ —É—Å–ø–µ—à–Ω–æ–≥–æ 16‚Üí0) = –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
                self.write_cycle_flag(-1)
                self.measurement_cycle_active = False
                self.clear_measurement_buffers()
                print(f" [{current_state_value}‚Üí0] –¶–∏–∫–ª –ø—Ä–µ—Ä–≤–∞–Ω! –û—à–∏–±–∫–∞.")

            # === –ü–û–¢–û–ö–û–í–´–ï –†–ï–ñ–ò–ú–´ (200/201/202/203) ===
            elif current_state_value == "IDLE" and new_cmd in [200, 201, 202, 203]:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–≤–Ω—ã–º –Ω–æ–º–µ—Ä—É –∫–æ–º–∞–Ω–¥—ã
                self.write_cycle_flag(new_cmd)
                self.clear_measurement_buffers()
                print(f" [0‚Üí{new_cmd}] –ù–∞—á–∞–ª–æ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            elif current_state_value in ["STREAM_SENSOR1", "STREAM_SENSOR2", "STREAM_SENSOR3", "STREAM_SENSOR4"] and new_cmd == 0:
                # –í—ã—Ö–æ–¥ –∏–∑ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ ‚Üí 0
                self.write_cycle_flag(0)
                self.clear_measurement_buffers()
                print(f" [{current_state_value}‚Üí0] –í—ã—Ö–æ–¥ –∏–∑ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–º —Ü–∏–∫–ª–∞: {e}")
    
    def write_cycle_flag(self, flag_value: int):
        """–ó–∞–ø–∏—Å—å —Ñ–ª–∞–≥–∞ —Ü–∏–∫–ª–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä 30009"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # 30009 -> –∏–Ω–¥–µ–∫—Å 8 –≤ pymodbus (—Å–º. modbus_slave_server.py init_registers)
                # –î–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ (two's complement)
                if flag_value < 0:
                    register_value = 65536 + flag_value  # –î–ª—è -1 –ø–æ–ª—É—á–∏—Ç—Å—è 65535
                else:
                    register_value = flag_value
                
                # –ò–Ω–¥–µ–∫—Å 8 (–∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ modbus_slave_server.py)
                self.modbus_server.slave_context.setValues(4, 8, [int(register_value)])
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏
                verify = self.modbus_server.slave_context.getValues(4, 8, 1)
                print(f" [–§–õ–ê–ì 30009] –ó–∞–ø–∏—Å–∞–Ω–æ: {flag_value} | –ü—Ä–æ–≤–µ—Ä–∫–∞: {verify[0] if verify else 'ERROR'}")
        except Exception as e:
            print(f" [–§–õ–ê–ì 30009] –û–®–ò–ë–ö–ê –∑–∞–ø–∏—Å–∏: {e}")
            import traceback
            traceback.print_exc()
    
    def increment_product_number(self):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏–∑–¥–µ–ª–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # 40101 -> –∏–Ω–¥–µ–∫—Å 100 –≤ Holding —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö (40001=–∏–Ω–¥–µ–∫—Å 0, 40101=–∏–Ω–¥–µ–∫—Å 100)
                current_number = self.modbus_server.slave_context.getValues(3, 100, 1)[0]
                new_number = current_number + 1
                self.modbus_server.slave_context.setValues(3, 100, [new_number])
                print(f" –ù–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è —É–≤–µ–ª–∏—á–µ–Ω: {current_number} ‚Üí {new_number}")
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏–∑–¥–µ–ª–∏—è: {e}")
    
    def evaluate_product_quality(self) -> str:
        """
        –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–¥–µ–ª–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        
        Returns:
            "GOOD", "CONDITIONALLY_GOOD" –∏–ª–∏ "BAD"
        """
        try:
            if not self.modbus_server or not self.modbus_server.slave_context:
                return "BAD"
            
            # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40049-40051
            check_mode = self.modbus_server.slave_context.getValues(3, 48, 1)[0]  # 40049
            allowed_conditionally_bad = self.modbus_server.slave_context.getValues(3, 49, 1)[0]  # 40050
            allowed_bad = self.modbus_server.slave_context.getValues(3, 50, 1)[0]  # 40051
            
            # –ß–∏—Ç–∞–µ–º –Ω–æ–º–µ—Ä —Å–º–µ–Ω—ã –∏ –∏–∑–¥–µ–ª–∏—è
            shift_number = self.modbus_server.slave_context.getValues(3, 99, 1)[0]  # 40100
            product_number = self.modbus_server.slave_context.getValues(3, 100, 1)[0]  # 40101
            
            # –°—á—ë—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
            conditionally_bad_count = 0
            bad_count = 0
            
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
            measurement_data = {
                'shift_number': shift_number,
                'product_number': product_number,
                'check_mode': check_mode,
                'allowed_conditionally_bad': allowed_conditionally_bad,
                'allowed_bad': allowed_bad
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—Ç—å
            check_indices = []
            if check_mode == 0:  # –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è (–º–∏–Ω, —Å—Ä–µ–¥, –º–∞–∫—Å)
                check_indices = [0, 1, 2]  # –º–∞–∫—Å, —Å—Ä–µ–¥, –º–∏–Ω
            elif check_mode == 1:  # —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–µ–µ
                check_indices = [1]
            elif check_mode == 2:  # –º–∞–∫—Å + —Å—Ä–µ–¥
                check_indices = [0, 1]
            elif check_mode == 3:  # –º–∏–Ω + —Å—Ä–µ–¥
                check_indices = [1, 2]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º 7 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω—ã: –≤—ã—Å–æ—Ç–∞, –Ω–∏–∂–Ω—è—è —Å—Ç–µ–Ω–∫–∞, –¥–Ω–æ)
            parameters = [
                {
                    'name': 'height',
                    'measured_regs': [(30040, 30041), (30042, 30043), (30044, 30045)],  # –º–∞–∫—Å, —Å—Ä–µ–¥, –º–∏–Ω
                    'base_regs': (40376, 40377),  # –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    'cond_bad_regs': (40378, 40379),  # —É—Å–ª–æ–≤–Ω–æ-–Ω–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                    'bad_regs': (40380, 40381),  # –Ω–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                    'check_type': 'one_sided'  # –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                },
                {
                    'name': 'upper_wall',
                    'measured_regs': [(30016, 30017), (30018, 30019), (30020, 30021)],  # –º–∞–∫—Å, —Å—Ä–µ–¥, –º–∏–Ω
                    'base_regs': (40352, 40353),  # –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    'cond_bad_regs': (40354, 40355),  # —É—Å–ª–æ–≤–Ω–æ-–Ω–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                    'bad_regs': (40356, 40357),  # –Ω–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                    'check_type': 'one_sided'  # –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                },
                {
                    'name': 'flange_thickness',
                    'measured_regs': [(30034, 30035), (30036, 30037), (30038, 30039)],
                    'base_regs': (40370, 40371),
                    'cond_bad_regs': (40372, 40373),
                    'bad_regs': (40374, 40375),
                    'check_type': 'one_sided'  # –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                },
                {
                    'name': 'body_diameter',
                    'measured_regs': [(30046, 30047), (30048, 30049), (30050, 30051)],
                    'base_regs': (40382, 40383),
                    'cond_bad_regs': (40384, 40385),
                    'bad_regs': (40386, 40387),
                    'check_type': 'one_sided'  # –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                },
                {
                    'name': 'flange_diameter',
                    'measured_regs': [(30052, 30053), (30054, 30055), (30056, 30057)],
                    'base_regs': (40388, 40389),
                    'cond_bad_regs': (40390, 40391),
                    'bad_regs': (40392, 40393),
                    'check_type': 'one_sided'  # –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                },
                {
                    'name': 'bottom_wall',
                    'measured_regs': [(30022, 30023), (30024, 30025), (30026, 30027)],  # –º–∞–∫—Å, —Å—Ä–µ–¥, –º–∏–Ω
                    'base_regs': (40358, 40359),  # –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    'cond_bad_regs': (40360, 40361),  # —É—Å–ª–æ–≤–Ω–æ-–Ω–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                    'bad_regs': (40362, 40363),  # –Ω–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                    'positive_bad_regs': (40402, 40403),  # –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –Ω–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                    'check_type': 'two_sided'  # –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                },
                {
                    'name': 'bottom',
                    'measured_regs': [(30028, 30029), (30030, 30031), (30032, 30033)],  # –º–∞–∫—Å, —Å—Ä–µ–¥, –º–∏–Ω
                    'base_regs': (40364, 40365),  # –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    'cond_bad_regs': (40366, 40367),  # —É—Å–ª–æ–≤–Ω–æ-–Ω–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                    'bad_regs': (40368, 40369),  # –Ω–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                    'positive_bad_regs': (40400, 40401),  # –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –Ω–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                    'check_type': 'two_sided'  # –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                }
            ]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            for param in parameters:
                # –ß–∏—Ç–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
                base_value = self.read_float_from_registers(param['base_regs'], 'holding')
                cond_bad_error = self.read_float_from_registers(param['cond_bad_regs'], 'holding')  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
                bad_error = self.read_float_from_registers(param['bad_regs'], 'holding')  # –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ
                
                # –î–ª—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Ç–∞–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
                positive_bad_error = None
                if param['check_type'] == 'two_sided':
                    positive_bad_error = self.read_float_from_registers(param['positive_bad_regs'], 'holding')
                
                # –ß–∏—Ç–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                measured_values = []
                for reg_pair in param['measured_regs']:
                    value = self.read_float_from_registers(reg_pair, 'input')
                    measured_values.append(value)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ measurement_data
                measurement_data[f"{param['name']}_max"] = measured_values[0]
                measurement_data[f"{param['name']}_avg"] = measured_values[1]
                measurement_data[f"{param['name']}_min"] = measured_values[2]
                
                # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                print(f"\n === {param['name'].upper()} ({param['check_type']}) ===")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                param_errors = []
                value_names = ['–ú–ê–ö–°', '–°–†–ï–î', '–ú–ò–ù']
                for idx in check_indices:
                    measured = measured_values[idx]
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    if param['check_type'] == 'two_sided':
                        status = self.check_single_value_with_upper_limit(
                            measured, base_value, cond_bad_error, bad_error, positive_bad_error
                        )
                    else:  # one_sided
                        status = self.check_single_value(measured, base_value, cond_bad_error, bad_error)
                    
                    param_errors.append(status)
                    print(f" [{value_names[idx]}] {measured:.3f} ‚Üí {status}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (—Ö—É–¥—à–∏–π –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö)
                if "BAD" in param_errors:
                    param_status = "BAD"
                    bad_count += 1
                elif "CONDITIONALLY_GOOD" in param_errors:
                    param_status = "CONDITIONALLY_GOOD"
                    conditionally_bad_count += 1
                else:
                    param_status = "GOOD"
                
                print(f" –ò–¢–û–ì: {param_status}")
                measurement_data[f"{param['name']}_status"] = param_status
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
            measurement_data['conditionally_bad_count'] = conditionally_bad_count
            measurement_data['bad_count'] = bad_count
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if bad_count > allowed_bad:
                result = "BAD"
            elif conditionally_bad_count > allowed_conditionally_bad:
                result = "CONDITIONALLY_GOOD"
            else:
                result = "GOOD"
            
            print(f"\n –ò–¢–û–ì: {result} | –°–º–µ–Ω–∞: {shift_number} | –ò–∑–¥–µ–ª–∏–µ: {product_number}")
            
            measurement_data['result'] = result
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            if self.modbus_server.db_integration:
                self.modbus_server.db_integration.db.save_measurement_record(measurement_data)
            
            return result
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return "BAD"
    
    def check_single_value(self, measured: float, base: float, cond_bad_error: float, bad_error: float) -> str:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è - —Ç–æ–ª—å–∫–æ –Ω–∏–∂–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã)
        
        Args:
            measured: –ò–∑–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            base: –ë–∞–∑–æ–≤–æ–µ (—ç—Ç–∞–ª–æ–Ω–Ω–æ–µ) –∑–Ω–∞—á–µ–Ω–∏–µ
            cond_bad_error: –£—Å–ª–æ–≤–Ω–æ-–Ω–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è)
            bad_error: –ù–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, –º–µ–Ω—å—à–µ cond_bad_error)
        
        Returns:
            "GOOD", "CONDITIONALLY_GOOD" –∏–ª–∏ "BAD"
        """
        # –î–∏–∞–ø–∞–∑–æ–Ω—ã:
        # –ì–û–î–ù–ê–Ø: [base + cond_bad_error, base]
        # –£–°–õ–û–í–ù–û-–ì–û–î–ù–ê–Ø: [base + bad_error, base + cond_bad_error)
        # –ù–ï–ì–û–î–ù–ê–Ø: < base + bad_error –∏–ª–∏ > base
        
        if measured > base:
            return "BAD"  # –ë–æ–ª—å—à–µ –±–∞–∑–æ–≤–æ–≥–æ - –Ω–µ–≥–æ–¥–Ω–∞—è
        elif measured >= base + cond_bad_error:
            return "GOOD"  # –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≥–æ–¥–Ω—ã—Ö
        elif measured >= base + bad_error:
            return "CONDITIONALLY_GOOD"  # –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ —É—Å–ª–æ–≤–Ω–æ-–≥–æ–¥–Ω—ã—Ö
        else:
            return "BAD"  # –ú–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ - –Ω–µ–≥–æ–¥–Ω–∞—è
    
    def check_single_value_with_upper_limit(self, measured: float, base: float, 
                                           cond_bad_error: float, bad_error: float, 
                                           positive_bad_error: float) -> str:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è - –Ω–∏–∂–Ω–∏–µ –∏ –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü—ã)
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ –∏ –¥–Ω–∞
        
        Args:
            measured: –ò–∑–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            base: –ë–∞–∑–æ–≤–æ–µ (—ç—Ç–∞–ª–æ–Ω–Ω–æ–µ) –∑–Ω–∞—á–µ–Ω–∏–µ
            cond_bad_error: –£—Å–ª–æ–≤–Ω–æ-–Ω–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è)
            bad_error: –ù–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, –º–µ–Ω—å—à–µ cond_bad_error)
            positive_bad_error: –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –Ω–µ–≥–æ–¥–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å (–≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞)
        
        Returns:
            "GOOD", "CONDITIONALLY_GOOD" –∏–ª–∏ "BAD"
        """
        # –î–∏–∞–ø–∞–∑–æ–Ω—ã:
        # –ù–ï–ì–û–î–ù–ê–Ø: measured < (base + bad_error)
        # –£–°–õ–û–í–ù–û-–ì–û–î–ù–ê–Ø: (base + bad_error) <= measured < (base + cond_bad_error)
        # –ì–û–î–ù–ê–Ø: (base + cond_bad_error) <= measured <= (base + positive_bad_error)
        # –ù–ï–ì–û–î–ù–ê–Ø: measured > (base + positive_bad_error)
        
        if measured > base + positive_bad_error:
            return "BAD"  # –ë–æ–ª—å—à–µ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã - –Ω–µ–≥–æ–¥–Ω–∞—è
        elif measured >= base + cond_bad_error:
            return "GOOD"  # –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≥–æ–¥–Ω—ã—Ö
        elif measured >= base + bad_error:
            return "CONDITIONALLY_GOOD"  # –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ —É—Å–ª–æ–≤–Ω–æ-–≥–æ–¥–Ω—ã—Ö
        else:
            return "BAD"  # –ú–µ–Ω—å—à–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã - –Ω–µ–≥–æ–¥–Ω–∞—è
    
    def read_float_from_registers(self, reg_pair: Tuple[int, int], reg_type: str = 'holding') -> float:
        """
        –ß—Ç–µ–Ω–∏–µ float –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–∞—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        
        Args:
            reg_pair: –ö–æ—Ä—Ç–µ–∂ (low_register, high_register)
            reg_type: 'holding' –∏–ª–∏ 'input'
        
        Returns:
            float –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
            if reg_type == 'holding':
                function_code = 3
                base_offset = 40000
            else:  # input
                function_code = 4
                base_offset = 30000
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã (–í–ê–ñ–ù–û: 40001 = –∏–Ω–¥–µ–∫—Å 1, 30001 = –∏–Ω–¥–µ–∫—Å 1 –≤ pymodbus)
            first_idx = reg_pair[0] - base_offset
            second_idx = reg_pair[1] - base_offset
            
            # –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è (–í HMI: –ø–µ—Ä–≤—ã–π —Ä–µ–≥–∏—Å—Ç—Ä = –°–¢–ê–†–®–ï–ï —Å–ª–æ–≤–æ, –≤—Ç–æ—Ä–æ–π = –ú–õ–ê–î–®–ï–ï)
            high_word = self.modbus_server.slave_context.getValues(function_code, first_idx, 1)[0]
            low_word = self.modbus_server.slave_context.getValues(function_code, second_idx, 1)[0]
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
            combined = (high_word << 16) | low_word
            float_value = struct.unpack('!f', struct.pack('!I', combined))[0]
            
            return float_value
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è float –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ {reg_pair}: {e}")
            return 0.0
    
    def update_product_counters(self, result: str):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ –∏–∑–¥–µ–ª–∏–π
        
        Args:
            result: "GOOD", "CONDITIONALLY_GOOD" –∏–ª–∏ "BAD"
        """
        try:
            if not self.modbus_server or not self.modbus_server.slave_context:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É —Å–º–µ–Ω—ã
            self.check_shift_change()
            
            # 30101 (–∏–Ω–¥–µ–∫—Å 100) - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            total = self.modbus_server.slave_context.getValues(4, 100, 1)[0]
            self.modbus_server.slave_context.setValues(4, 100, [total + 1])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—á—ë—Ç—á–∏–∫
            if result == "GOOD":
                # 30102 (–∏–Ω–¥–µ–∫—Å 101) - –≥–æ–¥–Ω—ã–µ
                good = self.modbus_server.slave_context.getValues(4, 101, 1)[0]
                self.modbus_server.slave_context.setValues(4, 101, [good + 1])
            elif result == "CONDITIONALLY_GOOD":
                # 30103 (–∏–Ω–¥–µ–∫—Å 102) - —É—Å–ª–æ–≤–Ω–æ-–≥–æ–¥–Ω—ã–µ
                cond_good = self.modbus_server.slave_context.getValues(4, 102, 1)[0]
                self.modbus_server.slave_context.setValues(4, 102, [cond_good + 1])
            else:  # BAD
                # 30104 (–∏–Ω–¥–µ–∫—Å 103) - –Ω–µ–≥–æ–¥–Ω—ã–µ
                bad = self.modbus_server.slave_context.getValues(4, 103, 1)[0]
                self.modbus_server.slave_context.setValues(4, 103, [bad + 1])
            
            print(f" –°—á—ë—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: –í—Å–µ–≥–æ={total + 1}, –†–µ–∑—É–ª—å—Ç–∞—Ç={result}")
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–æ–≤: {e}")
    
    def check_shift_change(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã —Å–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        """
        try:
            if not self.modbus_server or not self.modbus_server.slave_context:
                return
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–º–µ–Ω—ã –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 40100
            new_shift_number = self.modbus_server.slave_context.getValues(3, 99, 1)[0]
            
            # –ï—Å–ª–∏ —Å–º–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            if new_shift_number != self.current_shift_number:
                print(f" –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ —Å–º–µ–Ω—ã: {self.current_shift_number} -> {new_shift_number}")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—á—ë—Ç—á–∏–∫–∏ –∏–∑–¥–µ–ª–∏–π
                self.reset_product_counters()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É
                self.current_shift_number = new_shift_number
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–º–µ–Ω—ã: {e}")
    
    def reset_product_counters(self):
        """
        –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å—á—ë—Ç—á–∏–∫–æ–≤ –∏–∑–¥–µ–ª–∏–π –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–º–µ–Ω—ã
        """
        try:
            if not self.modbus_server or not self.modbus_server.slave_context:
                return
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –≤ Input —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ö 30101-30104
            self.modbus_server.slave_context.setValues(4, 100, [0])  # 30101 - –≤—Å–µ–≥–æ
            self.modbus_server.slave_context.setValues(4, 101, [0])  # 30102 - –≥–æ–¥–Ω—ã—Ö
            self.modbus_server.slave_context.setValues(4, 102, [0])  # 30103 - —É—Å–ª–æ–≤–Ω–æ-–≥–æ–¥–Ω—ã—Ö
            self.modbus_server.slave_context.setValues(4, 103, [0])  # 30104 - –Ω–µ–≥–æ–¥–Ω—ã—Ö
            
            print(" –°—á—ë—Ç—á–∏–∫–∏ –∏–∑–¥–µ–ª–∏–π —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã")
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤: {e}")
    
    def clear_measurement_buffers(self):
        """–û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
        # –ë—É—Ñ–µ—Ä—ã –∫–æ–º–∞–Ω–¥—ã 9 (–≤—ã—Å–æ—Ç–∞)
        self.height_measurements = []
        self.obstacle_detected = False
        self.obstacle_filter_count = 0
        self.height_calculated = False
        # –ë—É—Ñ–µ—Ä—ã –∏ —Ñ–ª–∞–≥–∏ –∫–æ–º–∞–Ω–¥—ã 103 (–∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤—ã—Å–æ—Ç—ã)
        self.height_calibration_nonzero_count = 0
        self.distance_to_plane_calculated = False
        self.recent_measurements = []
        
        # –ë—É—Ñ–µ—Ä—ã –∫–æ–º–∞–Ω–¥—ã 10
        self.sensor1_measurements = []
        self.sensor2_measurements = []
        self.wall_thickness_buffer = []
        self.temp_sensor1_buffer = []
        self.temp_sensor2_buffer = []
        
        # –ë—É—Ñ–µ—Ä—ã –∫–æ–º–∞–Ω–¥—ã 11
        self.sensor1_flange_measurements = []
        self.sensor3_measurements = []
        self.sensor4_measurements = []
        self.temp_sensor1_flange_buffer = []
        self.temp_sensor3_buffer = []
        self.temp_sensor4_buffer = []
        self.body_diameter_buffer = []
        self.flange_diameter_buffer = []
        self.flange_thickness_buffer = []
        self.bottom_thickness_buffer = []
        
        # –ë—É—Ñ–µ—Ä—ã –∫–æ–º–∞–Ω–¥—ã 12
        self.sensor1_bottom_measurements = []
        self.sensor2_bottom_measurements = []
        self.temp_sensor1_bottom_buffer = []
        self.temp_sensor2_bottom_buffer = []
        self.bottom_wall_thickness_buffer = []
        
        print(" –ë—É—Ñ–µ—Ä—ã –∏–∑–º–µ—Ä–µ–Ω–∏–π –æ—á–∏—â–µ–Ω—ã")
    
    def stop_all_streams(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
        if self.sensors:
            if self.stream_active_sensor1:
                try:
                    self.sensors.stop_stream_mode(1)
                    self.stream_active_sensor1 = False
                    print(" –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ç–æ–∫ –¥–∞—Ç—á–∏–∫–∞ 1")
                except Exception as e:
                    print(f" –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ –¥–∞—Ç—á–∏–∫–∞ 1: {e}")
            
            if self.stream_active_sensor2:
                try:
                    self.sensors.stop_stream_mode(2)
                    self.stream_active_sensor2 = False
                    print(" –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ç–æ–∫ –¥–∞—Ç—á–∏–∫–∞ 2")
                except Exception as e:
                    print(f" –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ –¥–∞—Ç—á–∏–∫–∞ 2: {e}")
            
            if self.stream_active_sensor3:
                try:
                    self.sensors.stop_stream_mode(3)
                    self.stream_active_sensor3 = False
                    print(" –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ç–æ–∫ –¥–∞—Ç—á–∏–∫–∞ 3")
                except Exception as e:
                    print(f" –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ –¥–∞—Ç—á–∏–∫–∞ 3: {e}")
            
            if self.stream_active_sensor4:
                try:
                    self.sensors.stop_stream_mode(4)
                    self.stream_active_sensor4 = False
                    print(" –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ç–æ–∫ –¥–∞—Ç—á–∏–∫–∞ 4")
                except Exception as e:
                    print(f" –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ –¥–∞—Ç—á–∏–∫–∞ 4: {e}")
    
    def execute_state_actions(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self.current_state == SystemState.IDLE:
            self.handle_idle_state()
            
        # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∏
        elif self.current_state == SystemState.CALIBRATE_WALL:
            self.handle_calibrate_wall_state()
        elif self.current_state == SystemState.CALIBRATE_BOTTOM:
            self.handle_calibrate_bottom_state()
        elif self.current_state == SystemState.CALIBRATE_FLANGE:
            self.handle_calibrate_flange_state()
        elif self.current_state == SystemState.CALIBRATE_HEIGHT:
            self.handle_calibrate_height_state()
        elif self.current_state == SystemState.DEBUG_REGISTERS:
            self.handle_debug_registers_state()
            
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã
        elif self.current_state == SystemState.MEASURE_HEIGHT_PROCESS:
            self.handle_measure_height_process_state()
            
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–∑–º–µ—Ä–µ–Ω–∏—è - –≤–µ—Ä—Ö–Ω—è—è —Å—Ç–µ–Ω–∫–∞
        elif self.current_state == SystemState.MEASURE_WALL_PROCESS:
            self.handle_measure_wall_process_state()
        elif self.current_state == SystemState.MEASURE_WALL_CALCULATE:
            self.handle_calculate_wall_state()
            
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–∑–º–µ—Ä–µ–Ω–∏—è - —Ñ–ª–∞–Ω–µ—Ü
        elif self.current_state == SystemState.MEASURE_FLANGE_PROCESS:
            self.handle_measure_flange_process_state()
        elif self.current_state == SystemState.MEASURE_FLANGE_CALCULATE:
            self.handle_calculate_flange_state()
            
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–∑–º–µ—Ä–µ–Ω–∏—è - –Ω–∏–∂–Ω—è—è —Å—Ç–µ–Ω–∫–∞
        elif self.current_state == SystemState.MEASURE_BOTTOM_PROCESS:
            self.handle_measure_bottom_process_state()
        elif self.current_state == SystemState.MEASURE_BOTTOM_CALCULATE:
            self.handle_calculate_bottom_state()
            
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–¥–µ–ª–∏—è
        elif self.current_state == SystemState.QUALITY_EVALUATION:
            self.handle_quality_evaluation_state()
            
        # –ü–æ—Ç–æ–∫–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã
        elif self.current_state == SystemState.STREAM_SENSOR1:
            self.handle_stream_sensor1_state()
        elif self.current_state == SystemState.STREAM_SENSOR2:
            self.handle_stream_sensor2_state()
        elif self.current_state == SystemState.STREAM_SENSOR3:
            self.handle_stream_sensor3_state()
        elif self.current_state == SystemState.STREAM_SENSOR4:
            self.handle_stream_sensor4_state()
            
        elif self.current_state == SystemState.ERROR:
            self.handle_error_state()
    
    def handle_calibrate_height_state(self):
        """
        CMD=103: –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤—ã—Å–æ—Ç—ã
        - –û–∂–∏–¥–∞–µ–º 3 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å –¥–∞—Ç—á–∏–∫–∞ 1
        - –ß–∏—Ç–∞–µ–º —à–∞–≥–∏ (40052-40053) –∏ –∏–º–ø—É–ª—å—Å—ã –Ω–∞ –º–º (40054)
        - –ß–∏—Ç–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É (40008-40009)
        - –í—ã—á–∏—Å–ª—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –¥–æ –Ω–∞—á–∞–ª–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ 40055-40056
        - –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: 103 (–ø–æ–∏—Å–∫) ‚Üí 931 (—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ), –æ–∂–∏–¥–∞–µ–º CMD=0
        """
        if not self.sensors:
            print(" –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!")
            self.current_state = SystemState.ERROR
            return
        
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏
            if self.frequency_start_time is None:
                self.frequency_start_time = time.time()
                self.last_frequency_display = self.frequency_start_time
            
            # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—á–∏–∫ 1
            sensor1_mm, sensor2_mm, sensor3_mm, sensor4_mm = self.sensors.perform_quad_sensor_measurement(
                self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm
            )
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—ã—Ä—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π)
            if self.frequency_counter <= 5:
                print(f" [CMD=103] –û—Ç–ª–∞–¥–∫–∞ #{self.frequency_counter}: sensor1_mm={sensor1_mm}")
            
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥–∏–º —á–∞—Å—Ç–æ—Ç—É —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
            self.frequency_counter += 1
            current_time = time.time()
            if current_time - self.last_frequency_display >= 1.0:
                elapsed = current_time - self.frequency_start_time
                if elapsed > 0:
                    instant_freq = self.frequency_counter / elapsed
                    status = "–ü–æ–∏—Å–∫ 3 –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π" if not self.distance_to_plane_calculated else "–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ"
                    print(f" [CMD=103] {status}: {instant_freq:.1f} –ì—Ü | –ò–∑–º–µ—Ä–µ–Ω–∏–π: {self.frequency_counter}")
                self.last_frequency_display = current_time
            
            # –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ 3 –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∏–∑–º–µ—Ä–µ–Ω–∏–π
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
            self.recent_measurements.append(sensor1_mm)
            if len(self.recent_measurements) > 5:
                self.recent_measurements.pop(0)  # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ–Ω—É–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä–µ
            nonzero_count = sum(1 for m in self.recent_measurements if m is not None and m > 0)
            
            # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –≤ –±—É—Ñ–µ—Ä–µ
            if hasattr(self, '_last_nonzero_count') and self._last_nonzero_count != nonzero_count:
                if sensor1_mm is not None and sensor1_mm > 0:
                    print(f" [CMD=103] –ù–µ–Ω—É–ª–µ–≤–æ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ: {sensor1_mm:.3f}–º–º | –ù–µ–Ω—É–ª–µ–≤—ã—Ö –≤ –±—É—Ñ–µ—Ä–µ: {nonzero_count}/5")
                else:
                    print(f" [CMD=103] –ù—É–ª–µ–≤–æ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ: {sensor1_mm} | –ù–µ–Ω—É–ª–µ–≤—ã—Ö –≤ –±—É—Ñ–µ—Ä–µ: {nonzero_count}/5")
            self._last_nonzero_count = nonzero_count
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ 3+ –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä–µ –∏ –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ
            if nonzero_count >= 3 and not self.distance_to_plane_calculated:
                print(f" [CMD=103] –ù–∞–π–¥–µ–Ω–æ {nonzero_count} –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π –≤ –±—É—Ñ–µ—Ä–µ! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç...")
                # –ß–∏—Ç–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä—ã
                steps = self.read_register_40020()          # 40052-40053
                pulses_per_mm = self.read_register_40021()  # 40054
                reference_height = self.read_reference_height()  # 40008-40009
                
                print(f" [CMD=103] –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞: —à–∞–≥–∏={steps}, –∏–º–ø—É–ª—å—Å—ã/–º–º={pulses_per_mm}, —ç—Ç–∞–ª–æ–Ω–Ω–∞—è_–≤—ã—Å–æ—Ç–∞={reference_height}")
                
                if steps is not None and pulses_per_mm is not None and pulses_per_mm > 0 and reference_height is not None:
                    # –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –Ω–∞—á–∞–ª–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ = —à–∞–≥–∏/–∏–º–ø—É–ª—å—Å—ã_–Ω–∞_–º–º + —ç—Ç–∞–ª–æ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
                    distance_to_plane = (steps / float(pulses_per_mm)) + float(reference_height)
                    self.write_distance_to_plane(distance_to_plane)
                    self.write_cycle_flag(931)  # –°—Ç–∞—Ç—É—Å: —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ
                    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ñ–ª–∞–≥ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∏–∑ False –≤ True
                    if not self.distance_to_plane_calculated:
                        print(f" [CMD=103] –§–õ–ê–ì –ò–ó–ú–ï–ù–ò–õ–°–Ø: distance_to_plane_calculated False ‚Üí True")
                        print(f" [CMD=103] –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {distance_to_plane:.3f}–º–º")
                        print(f" [CMD=103] –û–∂–∏–¥–∞–µ–º CMD=0 –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏")
                    self.distance_to_plane_calculated = True
                else:
                    print(f" [CMD=103] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞!")
            elif nonzero_count >= 3:
                pass  # –£–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–æ–¥–∏–º
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤—ã—Å–æ—Ç—ã (CMD=103): {e}")
            self.current_state = SystemState.ERROR

    def handle_debug_registers_state(self):
        """CMD=104: –û—Ç–ª–∞–¥–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
            if not hasattr(self, 'debug_start_time'):
                self.debug_start_time = time.time()
                self.debug_last_display = self.debug_start_time
                print(" [CMD=104] –ù–∞—á–∞–ª–æ –æ—Ç–ª–∞–¥–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤...")
            
            current_time = time.time()
            # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
            if current_time - self.debug_last_display >= 1.0:
                # –ß–∏—Ç–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ (30009)
                try:
                    status_values = self.modbus_server.slave_context.getValues(4, 8, 1)  # 30009 -> index 8
                    status = status_values[0] if status_values else "None"
                except:
                    status = "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è"
                
                # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã
                steps_raw = self.read_register_40020_raw()
                pulses_per_mm_raw = self.read_register_40021_raw()
                reference_height_raw = self.read_reference_height_raw()
                
                print(f" [CMD=104] === –û–¢–õ–ê–î–ö–ê –†–ï–ì–ò–°–¢–†–û–í ===")
                print(f" [CMD=104] –°—Ç–∞—Ç—É—Å (30009): {status}")
                print(f" [CMD=104] 40052-40053 (—à–∞–≥–∏): {steps_raw}")
                print(f" [CMD=104] 40054 (–∏–º–ø—É–ª—å—Å—ã/–º–º): {pulses_per_mm_raw}")
                print(f" [CMD=104] 40008-40009 (—ç—Ç–∞–ª–æ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞): {reference_height_raw}")
                print(f" [CMD=104] =========================")
                
                self.debug_last_display = current_time
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ (CMD=104): {e}")
            self.current_state = SystemState.ERROR

    def read_register_40020_raw(self):
        """–ß—Ç–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40052-40053"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                raw_values = self.modbus_server.slave_context.getValues(3, 52, 2)
                # –î–ª—è 32-bit integer –ù–ï –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∫ float
                if raw_values and len(raw_values) == 2:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ: –º–ª–∞–¥—à–µ–µ —Å–ª–æ–≤–æ (–Ω–∏–∑–∫–∏–µ –±–∏—Ç—ã) + —Å—Ç–∞—Ä—à–µ–µ —Å–ª–æ–≤–æ (–≤—ã—Å–æ–∫–∏–µ –±–∏—Ç—ã)
                    steps = (int(raw_values[0]) << 16) | int(raw_values[1])
                    return f"—Å—ã—Ä—ã–µ [52-53]: {raw_values} ‚Üí 32-bit int: {steps}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    def read_register_40021_raw(self):
        """–ß—Ç–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞ 40054"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ - —á–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
                raw_value = self.modbus_server.slave_context.getValues(3, 54, 1)
                if raw_value:
                    pulses = int(raw_value[0])
                    return f"—Å—ã—Ä—ã–µ [54]: {raw_value} ‚Üí 16-bit int: {pulses}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    def read_reference_height_raw(self):
        """–ß—Ç–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40008-40009"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                raw_values = self.modbus_server.slave_context.getValues(3, 8, 2)
                # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                height = self.read_reference_height()
                return f"—Å—ã—Ä—ã–µ [7-8]: {raw_values} ‚Üí float –º–º: {height:.3f}"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞: {e}"

    def read_reference_height(self) -> float:
        """–ß—Ç–µ–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –≤—ã—Å–æ—Ç—ã –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40008, 40009"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # HMI: —Å—Ç–∞—Ä—à–µ–µ —Å–ª–æ–≤–æ –≤ 40008, –º–ª–∞–¥—à–µ–µ –≤ 40009
                values = self.modbus_server.slave_context.getValues(3, 8, 2)
                if values and len(values) >= 2:
                    high_word = int(values[0])  # 40008 - —Å—Ç–∞—Ä—à–∏–π
                    low_word = int(values[1])   # 40009 - –º–ª–∞–¥—à–∏–π
                    height = self.doubleword_to_float(low_word, high_word)
                    return height
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–π –≤—ã—Å–æ—Ç—ã: {e}")
        return 0.0

    def write_distance_to_plane(self, distance: float):
        """–ó–∞–ø–∏—Å—å –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –¥–æ –Ω–∞—á–∞–ª–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã 40055, 40056"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                low_word, high_word = self.float_to_doubleword(distance)
                # HMI —á–∏—Ç–∞–µ—Ç: —Å—Ç–∞—Ä—à–µ–µ —Å–ª–æ–≤–æ –∏–∑ 40055, –º–ª–∞–¥—à–µ–µ –∏–∑ 40056
                self.modbus_server.slave_context.setValues(3, 55, [int(high_word)])  # 40055 - —Å—Ç–∞—Ä—à–∏–π
                self.modbus_server.slave_context.setValues(3, 56, [int(low_word)])   # 40056 - –º–ª–∞–¥—à–∏–π
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                if self.db_integration:
                    self.db_integration.save_doubleword_register(40055, 'holding', distance, '–î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –ø–ª–æ—Å–∫–æ—Å—Ç–∏')
                print(f" –ó–∞–ø–∏—Å–∞–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ 40055-40056: {distance:.3f} –º–º (high: {int(high_word)}, low: {int(low_word)})")
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –¥–æ –ø–ª–æ—Å–∫–æ—Å—Ç–∏: {e}")
    
    def handle_idle_state(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è"""
        # –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        pass
    
    def handle_calibrate_wall_state(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å—Ç–µ–Ω–∫–∏ (CMD = 100)"""
        if self.calibration_in_progress:
            return
            
        print("üîß –ù–ê–ß–ê–õ–û –ö–ê–õ–ò–ë–†–û–í–ö–ò –°–¢–ï–ù–ö–ò")
        self.calibration_in_progress = True
        
        try:
            # 1. –ß–∏—Ç–∞–µ–º —Ç–æ–ª—â–∏–Ω—É —ç—Ç–∞–ª–æ–Ω–∞ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40002, 40003
            reference_thickness = self.read_reference_thickness()
            print(f" –¢–æ–ª—â–∏–Ω–∞ —ç—Ç–∞–ª–æ–Ω–∞: {reference_thickness:.3f} –º–º")
            
            # 2. –ò–∑–º–µ—Ä—è–µ–º –¥–∞—Ç—á–∏–∫–∞–º–∏ 1,2 –Ω–µ –º–µ–Ω–µ–µ 4 —Å–µ–∫—É–Ω–¥
            print(" –ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞–º–∏ 1,2 –≤ —Ç–µ—á–µ–Ω–∏–µ 4 —Å–µ–∫—É–Ω–¥...")
            self.measure_sensors_for_calibration()
            
            # 3. –£—Å—Ä–µ–¥–Ω—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
            avg_sensor1, avg_sensor2, avg_sensor3 = self.calculate_averages()
            print(f" –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: –î1={avg_sensor1:.3f}–º–º, –î2={avg_sensor2:.3f}–º–º, –î3={avg_sensor3:.3f}–º–º")
            
            # 4. –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏ 1,2
            distance_1_2 = avg_sensor1 + avg_sensor2 + reference_thickness
            print(f" –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏ 1,2: {distance_1_2:.3f} –º–º")
            
            # 5. –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏ 1,3
            distance_1_3 = avg_sensor1 - avg_sensor3
            print(f" –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏ 1,3: {distance_1_3:.3f} –º–º")
            
            # 6. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 1,2 –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã 40010, 40011
            self.write_calibration_result_1_2(distance_1_2)
            
            # 7. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 1,3 –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã 40012, 40013
            self.write_calibration_result_1_3(distance_1_3)
            
            # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.calibration_data['wall_distance_1_2'] = distance_1_2
            self.calibration_data['wall_distance_1_3'] = distance_1_3
            
            # 9. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ 0, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            self.reset_command()
            
            print(" –ö–ê–õ–ò–ë–†–û–í–ö–ê –°–¢–ï–ù–ö–ò –ó–ê–í–ï–†–®–ï–ù–ê")
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {e}")
            self.current_state = SystemState.ERROR
                            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.reset_command()
        finally:
            self.calibration_in_progress = False
    
    def handle_calibrate_bottom_state(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –¥–Ω–∞ (CMD = 101)"""
        if self.calibration_in_progress:
            return
            
        print("üîß –ù–ê–ß–ê–õ–û –ö–ê–õ–ò–ë–†–û–í–ö–ò –î–ù–ê")
        self.calibration_in_progress = True
        
        try:
            # 1. –ß–∏—Ç–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—É—é —Ç–æ–ª—â–∏–Ω—É –¥–Ω–∞ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40004, 40005
            reference_bottom_thickness = self.read_reference_bottom_thickness()
            print(f" –≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –¥–Ω–∞: {reference_bottom_thickness:.3f} –º–º")
            
            # 2. –ò–∑–º–µ—Ä—è–µ–º –¥–∞—Ç—á–∏–∫–æ–º 4 –Ω–µ –º–µ–Ω–µ–µ 4 —Å–µ–∫—É–Ω–¥
            print(" –ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–º 4 –≤ —Ç–µ—á–µ–Ω–∏–µ 4 —Å–µ–∫—É–Ω–¥...")
            self.measure_sensor4_for_calibration()
            
            # 3. –£—Å—Ä–µ–¥–Ω—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 4
            avg_sensor4 = self.calculate_sensor4_average()
            print(f" –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ 4: {avg_sensor4:.3f} –º–º")
            
            # 4. –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥–∞—Ç—á–∏–∫–∞ 4 –¥–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
            # –§–æ—Ä–º—É–ª–∞: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ 4 - –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å = –ò–∑–º–µ—Ä–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–º 4 + —ç—Ç–∞–ª–æ–Ω–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –¥–Ω–∞
            distance_4_surface = avg_sensor4 + reference_bottom_thickness
            print(f" –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥–∞—Ç—á–∏–∫–∞ 4 –¥–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏: {distance_4_surface:.3f} –º–º")
            
            # 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã 40014, 40015
            self.write_calibration_result_4_surface(distance_4_surface)
            
            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.calibration_data['bottom_distance_4'] = distance_4_surface
            
            # 7. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ 0, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            self.reset_command()
            
            print(" –ö–ê–õ–ò–ë–†–û–í–ö–ê –î–ù–ê –ó–ê–í–ï–†–®–ï–ù–ê")
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –¥–Ω–∞: {e}")
            self.current_state = SystemState.ERROR
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.reset_command()
        finally:
            self.calibration_in_progress = False
    
    def handle_calibrate_flange_state(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Ñ–ª–∞–Ω—Ü–∞ (CMD = 102)"""
        if self.calibration_in_progress:
            return
            
        print("üîß –ù–ê–ß–ê–õ–û –ö–ê–õ–ò–ë–†–û–í–ö–ò –§–õ–ê–ù–¶–ê")
        self.calibration_in_progress = True
        
        try:
            # 1. –ß–∏—Ç–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40006, 40007
            reference_diameter = self.read_reference_diameter()
            print(f" –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä: {reference_diameter:.3f} –º–º")
            
            # 2. –ò–∑–º–µ—Ä—è–µ–º –¥–∞—Ç—á–∏–∫–æ–º 1 –Ω–µ –º–µ–Ω–µ–µ 4 —Å–µ–∫—É–Ω–¥
            print(" –ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–º 1 –≤ —Ç–µ—á–µ–Ω–∏–µ 4 —Å–µ–∫—É–Ω–¥...")
            self.measure_sensor1_for_calibration()
            
            # 3. –£—Å—Ä–µ–¥–Ω—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 1
            avg_sensor1 = self.calculate_sensor1_average()
            print(f" –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ 1: {avg_sensor1:.3f} –º–º")
            
            # 4. –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥–∞—Ç—á–∏–∫–∞ 1 –¥–æ —Ü–µ–Ω—Ç—Ä–∞
            # –§–æ—Ä–º—É–ª–∞: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫ 1 - —Ü–µ–Ω—Ç—Ä = –≠—Ç–∞–ª–æ–Ω–Ω—ã–π –¥–∏–∞–º–µ—Ç—Ä + –∏–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ 1
            distance_1_center = reference_diameter + avg_sensor1
            print(f" –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –¥–∞—Ç—á–∏–∫–∞ 1 –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {distance_1_center:.3f} –º–º")
            
            # 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã 40016, 40017
            self.write_calibration_result_1_center(distance_1_center)
            
            # 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            self.calibration_data['flange_distance_1_center'] = distance_1_center
            
            # 7. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤ 0, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            self.reset_command()
            
            print(" –ö–ê–õ–ò–ë–†–û–í–ö–ê –§–õ–ê–ù–¶–ê –ó–ê–í–ï–†–®–ï–ù–ê")
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Ñ–ª–∞–Ω—Ü–∞: {e}")
            self.current_state = SystemState.ERROR
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            self.reset_command()
        finally:
            self.calibration_in_progress = False
    
    def read_reference_thickness(self) -> float:
        """–ß—Ç–µ–Ω–∏–µ —Ç–æ–ª—â–∏–Ω—ã —ç—Ç–∞–ª–æ–Ω–∞ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40002, 40003"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ß–∏—Ç–∞–µ–º –¥–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (40002, 40003) - HMI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                values = self.modbus_server.slave_context.getValues(3, 2, 2)
                if values and len(values) >= 2:
                    # HMI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç: —Å—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –≤ 40002, –º–ª–∞–¥—à–∏–π –≤ 40003
                    high_word = int(values[0])  # 40002 - —Å—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –æ—Ç HMI
                    low_word = int(values[1])   # 40003 - –º–ª–∞–¥—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –æ—Ç HMI
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –¥–≤—É—Ö 16-–±–∏—Ç–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –≤ float
                    thickness_float = self.doubleword_to_float(low_word, high_word)
                    print(f" –ü—Ä–æ—á–∏—Ç–∞–Ω–∞ —Ç–æ–ª—â–∏–Ω–∞ —ç—Ç–∞–ª–æ–Ω–∞: {high_word}, {low_word} -> {thickness_float:.3f} –º–º")
                    return thickness_float
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–∞: {e}")
        return 0.0
    
    def measure_sensors_for_calibration(self):
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 4 —Å–µ–∫—É–Ω–¥"""
        if not self.sensors:
            print(" –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!")
            return
            
        start_time = time.time()
        measurement_count = 0
        
        print(" –ù–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π...")
        
        while (time.time() - start_time) < self.measurement_duration:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º QUAD –∏–∑–º–µ—Ä–µ–Ω–∏–µ (–∫–∞–∫ –≤ main.py - —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤)
                sensor1_mm, sensor2_mm, sensor3_mm, sensor4_mm = self.sensors.perform_quad_sensor_measurement(
                    self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                if all(v is not None for v in [sensor1_mm, sensor2_mm, sensor3_mm, sensor4_mm]):
                    self.measurement_buffer['sensor1'].append(sensor1_mm)
                    self.measurement_buffer['sensor2'].append(sensor2_mm)
                    self.measurement_buffer['sensor3'].append(sensor3_mm)
                    self.measurement_buffer['sensor4'].append(sensor4_mm)
                    measurement_count += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                elapsed = time.time() - start_time
                if int(elapsed) != int(elapsed - 0.1):  # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                    print(f" –í—Ä–µ–º—è: {elapsed:.1f}—Å, –ò–∑–º–µ—Ä–µ–Ω–∏–π: {measurement_count}")
                    
            except Exception as e:
                print(f" –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: {e}")
                # –£–±—Ä–∞–Ω sleep –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        
        print(f" –ò–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í—Å–µ–≥–æ: {measurement_count}")
    
    def calculate_averages(self) -> Tuple[float, float, float]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –¥–∞—Ç—á–∏–∫–æ–≤ 1, 2 –∏ 3"""
        if (len(self.measurement_buffer['sensor1']) == 0 or 
            len(self.measurement_buffer['sensor2']) == 0 or 
            len(self.measurement_buffer['sensor3']) == 0):
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è")
        
        avg_sensor1 = sum(self.measurement_buffer['sensor1']) / len(self.measurement_buffer['sensor1'])
        avg_sensor2 = sum(self.measurement_buffer['sensor2']) / len(self.measurement_buffer['sensor2'])
        avg_sensor3 = sum(self.measurement_buffer['sensor3']) / len(self.measurement_buffer['sensor3'])
        
        return avg_sensor1, avg_sensor2, avg_sensor3
    
    def write_calibration_result_1_2(self, distance: float):
        """–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è 1,2 –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã 40010, 40011"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float –≤ –¥–≤–∞ 16-–±–∏—Ç–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞
                low_word, high_word = self.float_to_doubleword(distance)
                
                # HMI —á–∏—Ç–∞–µ—Ç: —Å—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏–∑ 40010, –º–ª–∞–¥—à–∏–π –∏–∑ 40011
                # –ü–æ—ç—Ç–æ–º—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                self.modbus_server.slave_context.setValues(3, 10, [int(high_word)])  # 40010 - —Å—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                self.modbus_server.slave_context.setValues(3, 11, [int(low_word)])   # 40011 - –º–ª–∞–¥—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if self.db_integration:
                    self.db_integration.save_doubleword_register(
                        40010, 'holding', distance, '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏ 1,2'
                    )
                
                print(f" –†–µ–∑—É–ª—å—Ç–∞—Ç 1,2 –∑–∞–ø–∏—Å–∞–Ω –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã 40010, 40011: {distance:.3f} –º–º (high: {int(high_word)}, low: {int(low_word)})")
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ 1,2: {e}")
    
    def write_calibration_result_1_3(self, distance: float):
        """–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è 1,3 –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã 40012, 40013"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float –≤ –¥–≤–∞ 16-–±–∏—Ç–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞
                low_word, high_word = self.float_to_doubleword(distance)
                
                # HMI —á–∏—Ç–∞–µ—Ç: —Å—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏–∑ 40012, –º–ª–∞–¥—à–∏–π –∏–∑ 40013
                # –ü–æ—ç—Ç–æ–º—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                self.modbus_server.slave_context.setValues(3, 12, [int(high_word)])  # 40012 - —Å—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                self.modbus_server.slave_context.setValues(3, 13, [int(low_word)])   # 40013 - –º–ª–∞–¥—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if self.db_integration:
                    self.db_integration.save_doubleword_register(
                        40012, 'holding', distance, '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏ 1,3'
                    )
                
                print(f" –†–µ–∑—É–ª—å—Ç–∞—Ç 1,3 –∑–∞–ø–∏—Å–∞–Ω –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã 40012, 40013: {distance:.3f} –º–º (high: {int(high_word)}, low: {int(low_word)})")
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ 1,3: {e}")
    
    def read_reference_bottom_thickness(self) -> float:
        """–ß—Ç–µ–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã –¥–Ω–∞ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40004, 40005"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ß–∏—Ç–∞–µ–º –¥–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (40004, 40005) - HMI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                values = self.modbus_server.slave_context.getValues(3, 4, 2)
                if values and len(values) >= 2:
                    # HMI: —Å—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –≤ 40004, –º–ª–∞–¥—à–∏–π –≤ 40005
                    high_word = int(values[0])  # 40004
                    low_word = int(values[1])   # 40005
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float
                    thickness = self.doubleword_to_float(low_word, high_word)
                    return thickness
            return 0.0
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã –¥–Ω–∞: {e}")
            return 0.0
    
    def measure_sensor4_for_calibration(self):
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ 4 –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 4 —Å–µ–∫—É–Ω–¥"""
        if not self.sensors:
            print(" –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!")
            return
            
        start_time = time.time()
        measurement_count = 0
        
        print(" –ù–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 4...")
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –¥–∞—Ç—á–∏–∫–∞ 4
        self.measurement_buffer['sensor4'].clear()
        
        while (time.time() - start_time) < self.measurement_duration:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º QUAD –∏–∑–º–µ—Ä–µ–Ω–∏–µ (–∫–∞–∫ –≤ –∫–æ–º–∞–Ω–¥–µ 100)
                sensor1_mm, sensor2_mm, sensor3_mm, sensor4_mm = self.sensors.perform_quad_sensor_measurement(
                    self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 4
                if sensor4_mm is not None:
                    self.measurement_buffer['sensor4'].append(sensor4_mm)
                    measurement_count += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                elapsed = time.time() - start_time
                if int(elapsed) != int(elapsed - 0.1):  # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                    print(f" –í—Ä–µ–º—è: {elapsed:.1f}—Å, –ò–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 4: {measurement_count}")
                    
            except Exception as e:
                print(f" –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 4: {e}")
                # –£–±—Ä–∞–Ω sleep –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        
        print(f" –ò–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 4 –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í—Å–µ–≥–æ: {measurement_count}")
    
    def calculate_sensor4_average(self) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 4"""
        if len(self.measurement_buffer['sensor4']) == 0:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 4")
        
        avg_sensor4 = sum(self.measurement_buffer['sensor4']) / len(self.measurement_buffer['sensor4'])
        return round(avg_sensor4, 3)
    
    def write_calibration_result_4_surface(self, distance: float):
        """–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 4 –¥–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã 40014, 40015"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float –≤ –¥–≤–∞ 16-–±–∏—Ç–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞
                low_word, high_word = self.float_to_doubleword(distance)
                
                # HMI —á–∏—Ç–∞–µ—Ç: —Å—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏–∑ 40014, –º–ª–∞–¥—à–∏–π –∏–∑ 40015
                # –ü–æ—ç—Ç–æ–º—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                self.modbus_server.slave_context.setValues(3, 14, [int(high_word)])  # 40014 - —Å—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                self.modbus_server.slave_context.setValues(3, 15, [int(low_word)])   # 40015 - –º–ª–∞–¥—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if self.db_integration:
                    self.db_integration.save_doubleword_register(
                        40014, 'holding', distance, '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ 4 –¥–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏'
                    )
                
                print(f" –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞—Ç—á–∏–∫–∞ 4 –∑–∞–ø–∏—Å–∞–Ω –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã 40014, 40015: {distance:.3f} –º–º (high: {int(high_word)}, low: {int(low_word)})")
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–∞—Ç—á–∏–∫–∞ 4: {e}")
    
    def read_reference_diameter(self) -> float:
        """–ß—Ç–µ–Ω–∏–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –¥–∏–∞–º–µ—Ç—Ä–∞ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40006, 40007"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ß–∏—Ç–∞–µ–º –¥–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (40006, 40007) - HMI –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                values = self.modbus_server.slave_context.getValues(3, 6, 2)
                if values and len(values) >= 2:
                    # HMI: —Å—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –≤ 40006, –º–ª–∞–¥—à–∏–π –≤ 40007
                    high_word = int(values[0])  # 40006
                    low_word = int(values[1])   # 40007
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float
                    diameter = self.doubleword_to_float(low_word, high_word)
                    return diameter
            return 0.0
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —ç—Ç–∞–ª–æ–Ω–Ω–æ–≥–æ –¥–∏–∞–º–µ—Ç—Ä–∞: {e}")
            return 0.0
    
    def measure_sensor1_for_calibration(self):
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ 1 –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 4 —Å–µ–∫—É–Ω–¥"""
        if not self.sensors:
            print(" –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!")
            return
            
        start_time = time.time()
        measurement_count = 0
        
        print(" –ù–∞—á–∞–ª–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 1...")
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –¥–∞—Ç—á–∏–∫–∞ 1
        self.measurement_buffer['sensor1'].clear()
        
        while (time.time() - start_time) < self.measurement_duration:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º QUAD –∏–∑–º–µ—Ä–µ–Ω–∏–µ (–∫–∞–∫ –≤ –∫–æ–º–∞–Ω–¥–µ 100)
                sensor1_mm, sensor2_mm, sensor3_mm, sensor4_mm = self.sensors.perform_quad_sensor_measurement(
                    self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 1
                if sensor1_mm is not None:
                    self.measurement_buffer['sensor1'].append(sensor1_mm)
                    measurement_count += 1
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                elapsed = time.time() - start_time
                if int(elapsed) != int(elapsed - 0.1):  # –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                    print(f" –í—Ä–µ–º—è: {elapsed:.1f}—Å, –ò–∑–º–µ—Ä–µ–Ω–∏–π –¥–∞—Ç—á–∏–∫–∞ 1: {measurement_count}")
                    
            except Exception as e:
                print(f" –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 1: {e}")
                # –£–±—Ä–∞–Ω sleep –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        
        print(f" –ò–∑–º–µ—Ä–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 1 –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –í—Å–µ–≥–æ: {measurement_count}")
    
    def calculate_sensor1_average(self) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 1"""
        if len(self.measurement_buffer['sensor1']) == 0:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 1")
        
        avg_sensor1 = sum(self.measurement_buffer['sensor1']) / len(self.measurement_buffer['sensor1'])
        return round(avg_sensor1, 3)
    
    def write_calibration_result_1_center(self, distance: float):
        """–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 1 –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã 40016, 40017"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float –≤ –¥–≤–∞ 16-–±–∏—Ç–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞
                low_word, high_word = self.float_to_doubleword(distance)
                
                # HMI —á–∏—Ç–∞–µ—Ç: —Å—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏–∑ 40016, –º–ª–∞–¥—à–∏–π –∏–∑ 40017
                # –ü–æ—ç—Ç–æ–º—É –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                self.modbus_server.slave_context.setValues(3, 16, [int(high_word)])  # 40016 - —Å—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                self.modbus_server.slave_context.setValues(3, 17, [int(low_word)])   # 40017 - –º–ª–∞–¥—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if self.db_integration:
                    self.db_integration.save_doubleword_register(
                        40016, 'holding', distance, '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞ 1 –¥–æ —Ü–µ–Ω—Ç—Ä–∞'
                    )
                
                print(f" –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞—Ç—á–∏–∫–∞ 1 –∑–∞–ø–∏—Å–∞–Ω –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã 40016, 40017: {distance:.3f} –º–º (high: {int(high_word)}, low: {int(low_word)})")
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–∞—Ç—á–∏–∫–∞ 1: {e}")
    
    def float_to_doubleword(self, value: float) -> Tuple[int, int]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è float –≤ –¥–≤–∞ 16-–±–∏—Ç–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
        packed = struct.pack('>f', value)  # Big-endian float
        high_word, low_word = struct.unpack('>HH', packed)
        return low_word, high_word  # –ú–ª–∞–¥—à–µ–µ —Å–ª–æ–≤–æ –ø–µ—Ä–≤–æ–µ
    
    def doubleword_to_float(self, low_word: int, high_word: int) -> float:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–≤—É—Ö 16-–±–∏—Ç–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –≤ float"""
        packed = struct.pack('>HH', high_word, low_word)
        return struct.unpack('>f', packed)[0]
    
    def reset_command(self):
        """–°–±—Ä–æ—Å –∫–æ–º–∞–Ω–¥—ã –≤ —Ä–µ–≥–∏—Å—Ç—Ä 40001 –≤ 0"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                self.modbus_server.slave_context.setValues(3, 1, [0])  # 40001 = 0
                print(" –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –≤ 0")
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    def handle_measure_wall_state(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ (CMD = 10) - –¢–û–õ–¨–ö–û –°–ë–û–† –î–ê–ù–ù–´–•"""
        if not self.sensors:
            print(" –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!")
            self.current_state = SystemState.ERROR
            return
        
        # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ get_current_command() –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        # –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ handle_command(), –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –º–µ–Ω—è–µ—Ç current_state
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏
            if self.frequency_start_time is None:
                self.frequency_start_time = time.time()
                self.last_frequency_display = self.frequency_start_time
            
            # –°—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ manage_measurement_cycle_flag
            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º QUAD –∏–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤ 1 –∏ 2 (–∫–∞–∫ –≤ main.py)
            sensor1_mm, sensor2_mm, sensor3_mm, sensor4_mm = self.sensors.perform_quad_sensor_measurement(
                self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π
            self.frequency_counter += 1
            
            # –í—ã–≤–æ–¥–∏–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            current_time = time.time()
            if current_time - self.last_frequency_display >= 1.0:
                elapsed = current_time - self.frequency_start_time
                if elapsed > 0:
                    instant_freq = self.frequency_counter / elapsed
                    print(f" [CMD=10] –ß–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞: {instant_freq:.1f} –ì—Ü | –ò–∑–º–µ—Ä–µ–Ω–∏–π: {self.frequency_counter}")
                self.last_frequency_display = current_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤ 1 –∏ 2
            if sensor1_mm is not None and sensor2_mm is not None:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
                self.temp_sensor1_buffer.append(sensor1_mm)
                self.temp_sensor2_buffer.append(sensor2_mm)
                
                # –ö–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π - —É—Å—Ä–µ–¥–Ω—è–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
                if len(self.temp_sensor1_buffer) >= 10:
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    avg_sensor1 = sum(self.temp_sensor1_buffer) / len(self.temp_sensor1_buffer)
                    avg_sensor2 = sum(self.temp_sensor2_buffer) / len(self.temp_sensor2_buffer)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –±—É—Ñ–µ—Ä—ã
                    self.sensor1_measurements.append(avg_sensor1)
                    self.sensor2_measurements.append(avg_sensor2)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤–º–µ—Å—Ç–æ —á—Ç–µ–Ω–∏—è –∏–∑ Modbus)
                    distance_1_2 = self.cached_distance_1_2
                    
                    if distance_1_2 is not None:
                        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ–ª—â–∏–Ω—É —Å—Ç–µ–Ω–∫–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                        wall_thickness = distance_1_2 - avg_sensor1 - avg_sensor2
                        self.wall_thickness_buffer.append(wall_thickness)
                        
                        # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 100 —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π (—É–º–µ–Ω—å—à–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)
                        if len(self.wall_thickness_buffer) % 100 == 0:
                            print(f" –£—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ #{len(self.wall_thickness_buffer)}: "
                                  f"–î–∞—Ç—á–∏–∫1={avg_sensor1:.3f}–º–º, –î–∞—Ç—á–∏–∫2={avg_sensor2:.3f}–º–º, "
                                  f"–¢–æ–ª—â–∏–Ω–∞={wall_thickness:.3f}–º–º")
                    else:
                        print(" –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 1,2")
                    
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π
                    self.temp_sensor1_buffer = []
                    self.temp_sensor2_buffer = []
            else:
                print(f" –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: –¥–∞—Ç—á–∏–∫1={sensor1_mm}, –¥–∞—Ç—á–∏–∫2={sensor2_mm}")
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏: {e}")
            self.current_state = SystemState.ERROR
    
    def read_calibrated_distance_1_2(self) -> float:
        """–ß—Ç–µ–Ω–∏–µ –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏ 1,2 –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40010-40011"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ß–∏—Ç–∞–µ–º –¥–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (HMI: —Å—Ç–∞—Ä—à–∏–π –≤ 40010, –º–ª–∞–¥—à–∏–π –≤ 40011)
                values = self.modbus_server.slave_context.getValues(3, 10, 2)  # 40010-40011
                if values and len(values) == 2:
                    high_word = int(values[0])  # 40010 - —Å—Ç–∞—Ä—à–∏–π
                    low_word = int(values[1])   # 40011 - –º–ª–∞–¥—à–∏–π
                    distance = self.doubleword_to_float(low_word, high_word)
                    return distance
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è 1,2: {e}")
        return None
    
    def read_calibrated_distance_to_center(self) -> float:
        """–ß—Ç–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40016-40017"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ß–∏—Ç–∞–µ–º –¥–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (HMI: —Å—Ç–∞—Ä—à–∏–π –≤ 40016, –º–ª–∞–¥—à–∏–π –≤ 40017)
                values = self.modbus_server.slave_context.getValues(3, 16, 2)  # 40016-40017
                if values and len(values) == 2:
                    high_word = int(values[0])  # 40016 - —Å—Ç–∞—Ä—à–∏–π
                    low_word = int(values[1])   # 40017 - –º–ª–∞–¥—à–∏–π
                    distance = self.doubleword_to_float(low_word, high_word)
                    return distance
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {e}")
        return None
    
    def read_calibrated_distance_1_3(self) -> float:
        """–ß—Ç–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏ 1,3 –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40012-40013"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ß–∏—Ç–∞–µ–º –¥–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (HMI: —Å—Ç–∞—Ä—à–∏–π –≤ 40012, –º–ª–∞–¥—à–∏–π –≤ 40013)
                values = self.modbus_server.slave_context.getValues(3, 12, 2)  # 40012-40013
                if values and len(values) == 2:
                    high_word = int(values[0])  # 40012 - —Å—Ç–∞—Ä—à–∏–π
                    low_word = int(values[1])   # 40013 - –º–ª–∞–¥—à–∏–π
                    distance = self.doubleword_to_float(low_word, high_word)
                    return distance
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è 1,3: {e}")
        return None
    
    def read_calibrated_distance_sensor4(self) -> float:
        """–ß—Ç–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 4 –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40014-40015"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ß–∏—Ç–∞–µ–º –¥–≤–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (HMI: —Å—Ç–∞—Ä—à–∏–π –≤ 40014, –º–ª–∞–¥—à–∏–π –≤ 40015)
                values = self.modbus_server.slave_context.getValues(3, 14, 2)  # 40014-40015
                if values and len(values) == 2:
                    high_word = int(values[0])  # 40014 - —Å—Ç–∞—Ä—à–∏–π
                    low_word = int(values[1])   # 40015 - –º–ª–∞–¥—à–∏–π
                    distance = self.doubleword_to_float(low_word, high_word)
                    return distance
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ 4: {e}")
        return None
    
    def process_wall_measurement_results(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ç–µ–Ω–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ 10‚Üí11"""
        try:
            if len(self.wall_thickness_buffer) == 0:
                print(" –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            max_thickness = max(self.wall_thickness_buffer)
            min_thickness = min(self.wall_thickness_buffer)
            avg_thickness = sum(self.wall_thickness_buffer) / len(self.wall_thickness_buffer)
            
            print(f" –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏:")
            print(f"   –ò–∑–º–µ—Ä–µ–Ω–∏–π: {len(self.wall_thickness_buffer)}")
            print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_thickness:.3f}–º–º")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ:  {avg_thickness:.3f}–º–º")
            print(f"   –ú–∏–Ω–∏–º—É–º:  {min_thickness:.3f}–º–º")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã
            self.write_wall_measurement_results(max_thickness, avg_thickness, min_thickness)
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ç–µ–Ω–∫–∏: {e}")
    
    def write_wall_measurement_results(self, max_val: float, avg_val: float, min_val: float):
        """–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ç–µ–Ω–∫–∏ –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ ‚Üí 30016-30017
                self.write_stream_result_to_input_registers(max_val, 30016)
                
                # –°—Ä–µ–¥–Ω—è—è —Ç–æ–ª—â–∏–Ω–∞ ‚Üí 30018-30019
                self.write_stream_result_to_input_registers(avg_val, 30018)
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ ‚Üí 30020-30021
                self.write_stream_result_to_input_registers(min_val, 30020)
                
                print(f" –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã: –º–∞–∫—Å={max_val:.3f}, —Å—Ä–µ–¥={avg_val:.3f}, –º–∏–Ω={min_val:.3f}")
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ç–µ–Ω–∫–∏: {e}")
    
    def process_flange_measurement_results(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ñ–ª–∞–Ω—Ü–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ 11‚Üí12"""
        try:
            if (len(self.body_diameter_buffer) == 0 or len(self.flange_diameter_buffer) == 0 or
                len(self.flange_thickness_buffer) == 0 or len(self.bottom_thickness_buffer) == 0):
                print(" –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π —Ñ–ª–∞–Ω—Ü–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return
            
            # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–æ–≤ (–ø–µ—Ä–≤—ã–µ 5 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π)
            print(f"\n [–ë–£–§–ï–† –î–ò–ê–ú–ï–¢–† –ö–û–†–ü–£–°–ê] –†–∞–∑–º–µ—Ä: {len(self.body_diameter_buffer)}")
            print(f"   –ü–µ—Ä–≤—ã–µ 5: {[f'{x:.3f}' for x in list(self.body_diameter_buffer)[:5]]}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5: {[f'{x:.3f}' for x in list(self.body_diameter_buffer)[-5:]]}")
            
            print(f"\n [–ë–£–§–ï–† –¢–û–õ–©–ò–ù–ê –î–ù–ê] –†–∞–∑–º–µ—Ä: {len(self.bottom_thickness_buffer)}")
            print(f"   –ü–µ—Ä–≤—ã–µ 5: {[f'{x:.3f}' for x in list(self.bottom_thickness_buffer)[:5]]}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5: {[f'{x:.3f}' for x in list(self.bottom_thickness_buffer)[-5:]]}\n")
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞ –∫–æ—Ä–ø—É—Å–∞
            max_body_diameter = max(self.body_diameter_buffer)
            min_body_diameter = min(self.body_diameter_buffer)
            avg_body_diameter = sum(self.body_diameter_buffer) / len(self.body_diameter_buffer)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –¥–∏–∞–º–µ—Ç—Ä–∞ —Ñ–ª–∞–Ω—Ü–∞
            max_flange_diameter = max(self.flange_diameter_buffer)
            min_flange_diameter = min(self.flange_diameter_buffer)
            avg_flange_diameter = sum(self.flange_diameter_buffer) / len(self.flange_diameter_buffer)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–æ–ª—â–∏–Ω—ã —Ñ–ª–∞–Ω—Ü–∞
            max_flange_thickness = max(self.flange_thickness_buffer)
            min_flange_thickness = min(self.flange_thickness_buffer)
            avg_flange_thickness = sum(self.flange_thickness_buffer) / len(self.flange_thickness_buffer)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–æ–ª—â–∏–Ω—ã –¥–Ω–∞
            max_bottom_thickness = max(self.bottom_thickness_buffer)
            min_bottom_thickness = min(self.bottom_thickness_buffer)
            avg_bottom_thickness = sum(self.bottom_thickness_buffer) / len(self.bottom_thickness_buffer)
            
            print(f" –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ñ–ª–∞–Ω—Ü–∞:")
            print(f"   –ò–∑–º–µ—Ä–µ–Ω–∏–π: {len(self.body_diameter_buffer)}")
            print(f"   –î–∏–∞–º–µ—Ç—Ä –∫–æ—Ä–ø—É—Å–∞: –º–∞–∫—Å={max_body_diameter:.3f}–º–º, —Å—Ä–µ–¥={avg_body_diameter:.3f}–º–º, –º–∏–Ω={min_body_diameter:.3f}–º–º")
            print(f"   –î–∏–∞–º–µ—Ç—Ä —Ñ–ª–∞–Ω—Ü–∞: –º–∞–∫—Å={max_flange_diameter:.3f}–º–º, —Å—Ä–µ–¥={avg_flange_diameter:.3f}–º–º, –º–∏–Ω={min_flange_diameter:.3f}–º–º")
            print(f"   –¢–æ–ª—â–∏–Ω–∞ —Ñ–ª–∞–Ω—Ü–∞: –º–∞–∫—Å={max_flange_thickness:.3f}–º–º, —Å—Ä–µ–¥={avg_flange_thickness:.3f}–º–º, –º–∏–Ω={min_flange_thickness:.3f}–º–º")
            print(f"   –¢–æ–ª—â–∏–Ω–∞ –¥–Ω–∞: –º–∞–∫—Å={max_bottom_thickness:.3f}–º–º, —Å—Ä–µ–¥={avg_bottom_thickness:.3f}–º–º, –º–∏–Ω={min_bottom_thickness:.3f}–º–º")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã
            self.write_flange_measurement_results(
                max_body_diameter, avg_body_diameter, min_body_diameter,
                max_flange_diameter, avg_flange_diameter, min_flange_diameter,
                max_flange_thickness, avg_flange_thickness, min_flange_thickness,
                max_bottom_thickness, avg_bottom_thickness, min_bottom_thickness
            )
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ñ–ª–∞–Ω—Ü–∞: {e}")
    
    def write_flange_measurement_results(self, 
                                       max_body_diameter: float, avg_body_diameter: float, min_body_diameter: float,
                                       max_flange_diameter: float, avg_flange_diameter: float, min_flange_diameter: float,
                                       max_flange_thickness: float, avg_flange_thickness: float, min_flange_thickness: float,
                                       max_bottom_thickness: float, avg_bottom_thickness: float, min_bottom_thickness: float):
        """–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ñ–ª–∞–Ω—Ü–∞ –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –î–∏–∞–º–µ—Ç—Ä –∫–æ—Ä–ø—É—Å–∞ ‚Üí 30046-30051
                self.write_stream_result_to_input_registers(max_body_diameter, 30046)   # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
                self.write_stream_result_to_input_registers(avg_body_diameter, 30048)   # –°—Ä–µ–¥–Ω–µ–µ
                self.write_stream_result_to_input_registers(min_body_diameter, 30050)   # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ
                
                # –î–∏–∞–º–µ—Ç—Ä —Ñ–ª–∞–Ω—Ü–∞ ‚Üí 30052-30057
                self.write_stream_result_to_input_registers(max_flange_diameter, 30052) # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
                self.write_stream_result_to_input_registers(avg_flange_diameter, 30054) # –°—Ä–µ–¥–Ω–µ–µ
                self.write_stream_result_to_input_registers(min_flange_diameter, 30056) # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ
                
                # –¢–æ–ª—â–∏–Ω–∞ —Ñ–ª–∞–Ω—Ü–∞ ‚Üí 30034-30039
                self.write_stream_result_to_input_registers(max_flange_thickness, 30034) # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
                self.write_stream_result_to_input_registers(avg_flange_thickness, 30036) # –°—Ä–µ–¥–Ω–µ–µ
                self.write_stream_result_to_input_registers(min_flange_thickness, 30038) # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ
                
                # –¢–æ–ª—â–∏–Ω–∞ –¥–Ω–∞ ‚Üí 30028-30033
                self.write_stream_result_to_input_registers(max_bottom_thickness, 30028) # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ
                self.write_stream_result_to_input_registers(avg_bottom_thickness, 30030) # –°—Ä–µ–¥–Ω–µ–µ
                self.write_stream_result_to_input_registers(min_bottom_thickness, 30032) # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ
                
                print(f" –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ñ–ª–∞–Ω—Ü–∞ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã")
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ñ–ª–∞–Ω—Ü–∞: {e}")
    
    def process_bottom_wall_measurement_results(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ 12‚Üí0"""
        try:
            if len(self.bottom_wall_thickness_buffer) == 0:
                print(" –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ç–æ–ª—â–∏–Ω—ã –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
            max_bottom_wall_thickness = max(self.bottom_wall_thickness_buffer)
            min_bottom_wall_thickness = min(self.bottom_wall_thickness_buffer)
            avg_bottom_wall_thickness = sum(self.bottom_wall_thickness_buffer) / len(self.bottom_wall_thickness_buffer)
            
            print(f" –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏:")
            print(f"   –ò–∑–º–µ—Ä–µ–Ω–∏–π: {len(self.bottom_wall_thickness_buffer)}")
            print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_bottom_wall_thickness:.3f}–º–º")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ:  {avg_bottom_wall_thickness:.3f}–º–º")
            print(f"   –ú–∏–Ω–∏–º—É–º:  {min_bottom_wall_thickness:.3f}–º–º")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã
            self.write_bottom_wall_measurement_results(max_bottom_wall_thickness, avg_bottom_wall_thickness, min_bottom_wall_thickness)
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏: {e}")
    
    def write_bottom_wall_measurement_results(self, max_val: float, avg_val: float, min_val: float):
        """–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ ‚Üí 30022-30023
                self.write_stream_result_to_input_registers(max_val, 30022)
                
                # –°—Ä–µ–¥–Ω—è—è —Ç–æ–ª—â–∏–Ω–∞ –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ ‚Üí 30024-30025
                self.write_stream_result_to_input_registers(avg_val, 30024)
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–æ–ª—â–∏–Ω–∞ –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ ‚Üí 30026-30027
                self.write_stream_result_to_input_registers(min_val, 30026)
                
                print(f" –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã: –º–∞–∫—Å={max_val:.3f}, —Å—Ä–µ–¥={avg_val:.3f}, –º–∏–Ω={min_val:.3f}")
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏: {e}")
    
    def write_doubleword_to_input_registers(self, value: float, base_address: int):
        """–ó–∞–ø–∏—Å—å DoubleWord float –≤ Input —Ä–µ–≥–∏—Å—Ç—Ä—ã"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ DoubleWord
                low_word, high_word = self.float_to_doubleword(value)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã (–º–ª–∞–¥—à–∏–π –≤ base_address, —Å—Ç–∞—Ä—à–∏–π –≤ base_address+1)
                reg_index_low = base_address - 30000       # –ú–ª–∞–¥—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä (base_address)
                reg_index_high = base_address - 30000 + 1  # –°—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä (base_address+1)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º (–º–ª–∞–¥—à–∏–π –≤ –ø–µ—Ä–≤—ã–π —Ä–µ–≥–∏—Å—Ç—Ä, —Å—Ç–∞—Ä—à–∏–π –≤–æ –≤—Ç–æ—Ä–æ–π)
                self.modbus_server.slave_context.setValues(4, reg_index_low, [int(low_word)])
                self.modbus_server.slave_context.setValues(4, reg_index_high, [int(high_word)])
                
                print(f" –ó–∞–ø–∏—Å–∞–Ω–æ –≤ {base_address}-{base_address+1}: {value:.3f}–º–º (low={low_word}, high={high_word})")
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ DoubleWord –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã {base_address}-{base_address+1}: {e}")
    
    def handle_measure_flange_state(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ñ–ª–∞–Ω—Ü–∞ (CMD = 12) - –¢–û–õ–¨–ö–û –°–ë–û–† –î–ê–ù–ù–´–•"""
        if not self.sensors:
            print(" –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!")
            self.current_state = SystemState.ERROR
            return
        
        # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ get_current_command() –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        # –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ handle_command(), –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –º–µ–Ω—è–µ—Ç current_state
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏ —Ñ–ª–∞–Ω—Ü–∞
            if self.frequency_start_time is None:
                self.frequency_start_time = time.time()
                self.last_frequency_display = self.frequency_start_time
                self.frequency_counter = 0
            
            # –°—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ manage_measurement_cycle_flag
            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º QUAD –∏–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤ 1, 3 –∏ 4 (–∫–∞–∫ –≤ main.py)
            sensor1_mm, sensor2_mm, sensor3_mm, sensor4_mm = self.sensors.perform_quad_sensor_measurement(
                self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π
            self.frequency_counter += 1
            
            # –í—ã–≤–æ–¥–∏–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            current_time = time.time()
            if current_time - self.last_frequency_display >= 1.0:
                elapsed = current_time - self.frequency_start_time
                if elapsed > 0:
                    instant_freq = self.frequency_counter / elapsed
                    print(f" [CMD=12] –ß–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞: {instant_freq:.1f} –ì—Ü | –ò–∑–º–µ—Ä–µ–Ω–∏–π: {self.frequency_counter}")
                self.last_frequency_display = current_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤ 1, 3 –∏ 4
            if (sensor1_mm is not None and sensor3_mm is not None and sensor4_mm is not None):
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
                self.temp_sensor1_flange_buffer.append(sensor1_mm)
                self.temp_sensor3_buffer.append(sensor3_mm)
                self.temp_sensor4_buffer.append(sensor4_mm)
                
                # –ö–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π - —É—Å—Ä–µ–¥–Ω—è–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
                if len(self.temp_sensor1_flange_buffer) >= 10:
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    avg_sensor1 = sum(self.temp_sensor1_flange_buffer) / len(self.temp_sensor1_flange_buffer)
                    avg_sensor3 = sum(self.temp_sensor3_buffer) / len(self.temp_sensor3_buffer)
                    avg_sensor4 = sum(self.temp_sensor4_buffer) / len(self.temp_sensor4_buffer)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –±—É—Ñ–µ—Ä—ã
                    self.sensor1_flange_measurements.append(avg_sensor1)
                    self.sensor3_measurements.append(avg_sensor3)
                    self.sensor4_measurements.append(avg_sensor4)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    distance_to_center = self.cached_distance_to_center
                    distance_1_3 = self.cached_distance_1_3
                    distance_sensor4 = self.cached_distance_sensor4
                    
                    if (distance_to_center is not None and distance_1_3 is not None and 
                        distance_sensor4 is not None):
                        
                        # 1) –î–∏–∞–º–µ—Ç—Ä –∫–æ—Ä–ø—É—Å–∞ (–î–∞—Ç—á–∏–∫ 1)
                        body_diameter = distance_to_center - avg_sensor1
                        self.body_diameter_buffer.append(body_diameter)
                        
                        # 2) –î–∏–∞–º–µ—Ç—Ä —Ñ–ª–∞–Ω—Ü–∞ (–î–∞—Ç—á–∏–∫ 3)
                        flange_diameter = distance_to_center - distance_1_3 - avg_sensor3
                        self.flange_diameter_buffer.append(flange_diameter)
                        
                        # 3) –¢–æ–ª—â–∏–Ω–∞ —Ñ–ª–∞–Ω—Ü–∞ (–î–∞—Ç—á–∏–∫–∏ 1,3)
                        flange_thickness = avg_sensor1 - avg_sensor3
                        self.flange_thickness_buffer.append(flange_thickness)
                        
                        # 4) –¢–æ–ª—â–∏–Ω–∞ –¥–Ω–∞ (–î–∞—Ç—á–∏–∫ 4)
                        bottom_thickness = distance_sensor4 - avg_sensor4
                        self.bottom_thickness_buffer.append(bottom_thickness)
                        
                        # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
                        if len(self.body_diameter_buffer) % 100 == 0:
                            print(f" [CMD=12] –°–æ–±—Ä–∞–Ω–æ: {len(self.body_diameter_buffer)} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
                            print(f"   –î–∏–∞–º–µ—Ç—Ä –∫–æ—Ä–ø—É—Å–∞={body_diameter:.3f}–º–º, –î–∏–∞–º–µ—Ç—Ä —Ñ–ª–∞–Ω—Ü–∞={flange_diameter:.3f}–º–º")
                            print(f"   –¢–æ–ª—â–∏–Ω–∞ —Ñ–ª–∞–Ω—Ü–∞={flange_thickness:.3f}–º–º, –¢–æ–ª—â–∏–Ω–∞ –¥–Ω–∞={bottom_thickness:.3f}–º–º")
                    else:
                        print(" –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
                    
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π
                    self.temp_sensor1_flange_buffer = []
                    self.temp_sensor3_buffer = []
                    self.temp_sensor4_buffer = []
            else:
                print(f" –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: –¥–∞—Ç—á–∏–∫1={sensor1_mm}, –¥–∞—Ç—á–∏–∫3={sensor3_mm}, –¥–∞—Ç—á–∏–∫4={sensor4_mm}")
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ñ–ª–∞–Ω—Ü–∞: {e}")
            self.current_state = SystemState.ERROR
    
    def handle_measure_bottom_state(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ (CMD = 14) - –¢–û–õ–¨–ö–û –°–ë–û–† –î–ê–ù–ù–´–•"""
        if not self.sensors:
            print(" –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!")
            self.current_state = SystemState.ERROR
            return
        
        # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ get_current_command() –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        # –ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ handle_command(), –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –º–µ–Ω—è–µ—Ç current_state
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏ –¥–Ω–∞
            if self.frequency_start_time is None:
                self.frequency_start_time = time.time()
                self.last_frequency_display = self.frequency_start_time
                self.frequency_counter = 0
            
            # –°—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ manage_measurement_cycle_flag
            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º QUAD –∏–∑–º–µ—Ä–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤ 1 –∏ 2 (–∫–∞–∫ –≤ main.py)
            sensor1_mm, sensor2_mm, sensor3_mm, sensor4_mm = self.sensors.perform_quad_sensor_measurement(
                self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π
            self.frequency_counter += 1
            
            # –í—ã–≤–æ–¥–∏–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            current_time = time.time()
            if current_time - self.last_frequency_display >= 1.0:
                elapsed = current_time - self.frequency_start_time
                if elapsed > 0:
                    instant_freq = self.frequency_counter / elapsed
                    print(f" [CMD=14] –ß–∞—Å—Ç–æ—Ç–∞ –æ–ø—Ä–æ—Å–∞: {instant_freq:.1f} –ì—Ü | –ò–∑–º–µ—Ä–µ–Ω–∏–π: {self.frequency_counter}")
                self.last_frequency_display = current_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥–∞—Ç—á–∏–∫–æ–≤ 1 –∏ 2
            if sensor1_mm is not None and sensor2_mm is not None:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
                self.temp_sensor1_bottom_buffer.append(sensor1_mm)
                self.temp_sensor2_bottom_buffer.append(sensor2_mm)
                
                # –ö–æ–≥–¥–∞ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π - —É—Å—Ä–µ–¥–Ω—è–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
                if len(self.temp_sensor1_bottom_buffer) >= 10:
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    avg_sensor1 = sum(self.temp_sensor1_bottom_buffer) / len(self.temp_sensor1_bottom_buffer)
                    avg_sensor2 = sum(self.temp_sensor2_bottom_buffer) / len(self.temp_sensor2_bottom_buffer)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –±—É—Ñ–µ—Ä—ã
                    self.sensor1_bottom_measurements.append(avg_sensor1)
                    self.sensor2_bottom_measurements.append(avg_sensor2)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤–º–µ—Å—Ç–æ —á—Ç–µ–Ω–∏—è –∏–∑ Modbus)
                    distance_1_2 = self.cached_distance_1_2
                    
                    if distance_1_2 is not None:
                        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ–ª—â–∏–Ω—É –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                        bottom_wall_thickness = distance_1_2 - avg_sensor1 - avg_sensor2
                        self.bottom_wall_thickness_buffer.append(bottom_wall_thickness)
                        
                        # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 100 —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π (—É–º–µ–Ω—å—à–µ–Ω–∞ —á–∞—Å—Ç–æ—Ç–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è)
                        if len(self.bottom_wall_thickness_buffer) % 100 == 0:
                            print(f" –£—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ #{len(self.bottom_wall_thickness_buffer)}: "
                                  f"–î–∞—Ç—á–∏–∫1={avg_sensor1:.3f}–º–º, –î–∞—Ç—á–∏–∫2={avg_sensor2:.3f}–º–º, "
                                  f"–¢–æ–ª—â–∏–Ω–∞ –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏={bottom_wall_thickness:.3f}–º–º")
                    else:
                        print(" –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 1,2")
                    
                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π
                    self.temp_sensor1_bottom_buffer = []
                    self.temp_sensor2_bottom_buffer = []
            else:
                print(f" –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: –¥–∞—Ç—á–∏–∫1={sensor1_mm}, –¥–∞—Ç—á–∏–∫2={sensor2_mm}")
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏: {e}")
            self.current_state = SystemState.ERROR
    
    # ===== –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ó–î–ï–õ–Å–ù–ù–û–ì–û –¶–ò–ö–õ–ê –ò–ó–ú–ï–†–ï–ù–ò–Ø =====
    
    def handle_measure_height_process_state(self):
        """
        CMD=9: –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã - –ø–æ–∏—Å–∫ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        """
        if not self.sensors:
            print(" –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã!")
            self.current_state = SystemState.ERROR
            return
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏
            if self.frequency_start_time is None:
                self.frequency_start_time = time.time()
                self.last_frequency_display = self.frequency_start_time
                self.frequency_counter = 0
                self.obstacle_detected = False
                self.obstacle_filter_count = 0
                self.height_measurements = []
                print(" [CMD=9] –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è...")
            
            # –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—á–∏–∫ 1 –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
            sensor1_mm, _, _, _ = self.sensors.perform_quad_sensor_measurement(
                self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm, self.sensor_range_mm
            )
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π
            self.frequency_counter += 1
            
            # –í—ã–≤–æ–¥–∏–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            current_time = time.time()
            if current_time - self.last_frequency_display >= 1.0:
                elapsed = current_time - self.frequency_start_time
                if elapsed > 0:
                    instant_freq = self.frequency_counter / elapsed
                    status = "–ü–æ–∏—Å–∫ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è" if not self.obstacle_detected else "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤—ã—Å–æ—Ç—ã"
                    print(f" [CMD=9] {status}: {instant_freq:.1f} –ì—Ü | –ò–∑–º–µ—Ä–µ–Ω–∏–π: {self.frequency_counter}")
                self.last_frequency_display = current_time
            
            # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: 
            # –ü–æ–∫–∞ –¥–∞—Ç—á–∏–∫ = 0 ‚Üí –∏—â–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
            # –ö–∞–∫ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—á–∏–∫ != 0 (5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥) ‚Üí –Ω–∞—à–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ, —Å—á–∏—Ç–∞–µ–º –≤—ã—Å–æ—Ç—É
            
            if sensor1_mm is not None and sensor1_mm > 0.0:
                # –î–∞—Ç—á–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –µ—Å—Ç—å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ!
                self.obstacle_filter_count += 1
                
                if not self.obstacle_detected and self.obstacle_filter_count >= 5:
                    # 5 –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø–æ–¥—Ä—è–¥ - –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!
                    self.obstacle_detected = True
                    self.write_cycle_flag(90)  # –°—Ç–∞—Ç—É—Å: –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–æ
                    print(f" [CMD=9] –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–æ! –î–∞—Ç—á–∏–∫ 1 = {sensor1_mm:.3f}–º–º (5 –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø–æ–¥—Ä—è–¥)")
                
                if self.obstacle_detected:
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Å–æ—Ç—ã
                    self.collect_height_data()
            else:
                # –î–∞—Ç—á–∏–∫ = 0 –∏–ª–∏ None ‚Üí —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
                self.obstacle_filter_count = 0
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã: {e}")
            self.current_state = SystemState.ERROR
    
    def collect_height_data(self):
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Å–æ—Ç—ã"""
        try:
            # –ß–∏—Ç–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä—ã –∫–∞–∫ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö 103 –∏ 104
            steps = self.read_register_40020()  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (40052-40053)
            pulses_per_mm = self.read_register_40021()  # –ò–º–ø—É–ª—å—Å–æ–≤ –Ω–∞ 1 –º–º (40054)
            distance_to_plane = self.read_register_40022_40023()  # –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ (40055-40056)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–ª–∏–¥–Ω—ã (–Ω–µ None –∏ –Ω–µ 0 –¥–ª—è pulses_per_mm)
            if steps is not None and pulses_per_mm is not None and pulses_per_mm > 0 and distance_to_plane is not None:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–æ —Ñ–æ—Ä–º—É–ª–µ: height = distance_to_plane - (steps/pulses)
                height = distance_to_plane - (steps / pulses_per_mm)
                self.height_measurements.append(height)
                
                # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                if len(self.height_measurements) % 10 == 0:
                    # –ß–∏—Ç–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —à–∞–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    try:
                        raw_steps_values = self.modbus_server.slave_context.getValues(3, 52, 2)
                        raw_steps_str = f"—Å—ã—Ä—ã–µ [52-53]: {raw_steps_values}" if raw_steps_values else "None"
                    except:
                        raw_steps_str = "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è"
                    
                    print(f" [CMD=9] –°–æ–±—Ä–∞–Ω–æ: {len(self.height_measurements)} | "
                          f"–®–∞–≥–∏: {raw_steps_str} ‚Üí {steps}, –ò–º–ø/–º–º={pulses_per_mm}, –î–∏—Å—Ç={distance_to_plane:.3f}–º–º ‚Üí –í—ã—Å–æ—Ç–∞={height:.3f}–º–º")
                
                # –ï—Å–ª–∏ —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50 –∏–∑–º–µ—Ä–µ–Ω–∏–π) –ò —Ñ–ª–∞–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if len(self.height_measurements) >= 50 and not self.height_calculated:
                    self.calculate_and_save_height()
                    
        except Exception as e:
            # –ù–µ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if "division by zero" not in str(e):
                print(f" [CMD=9] –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã—Å–æ—Ç—ã: {e}")
    
    def calculate_and_save_height(self):
        """–†–∞—Å—á–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã"""
        try:
            if len(self.height_measurements) == 0:
                print(" –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Å–æ—Ç—ã")
                return
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            max_height = max(self.height_measurements)
            min_height = min(self.height_measurements)
            avg_height = sum(self.height_measurements) / len(self.height_measurements)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã
            self.write_height_measurement_results(max_height, avg_height, min_height)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.write_cycle_flag(91)  # –°—Ç–∞—Ç—É—Å: –≤—ã—Å–æ—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞
            self.height_calculated = True
            
            # –í—ã–≤–æ–¥–∏–º —Ñ–æ—Ä–º—É–ª—É —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Å–æ—Ç—ã
            print(f" [CMD=9] –§–û–†–ú–£–õ–ê: height = distance_to_plane - (steps / pulses_per_mm)")
            print(f" [CMD=9] –ì–¥–µ: distance_to_plane={self.read_register_40022_40023():.3f}–º–º (40055-40056)")
            print(f" [CMD=9]       steps={self.read_register_40020()} (40052-40053)")
            print(f" [CMD=9]       pulses_per_mm={self.read_register_40021()} (40054)")
            print(f" [CMD=9] –í—ã—Å–æ—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: –º–∞–∫—Å={max_height:.3f}–º–º, "
                  f"—Å—Ä–µ–¥={avg_height:.3f}–º–º, –º–∏–Ω={min_height:.3f}–º–º")
            print(f" [CMD=9] –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ (CMD=10)")
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã—Å–æ—Ç—ã: {e}")
    
    def read_register_40020(self) -> int:
        """–ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40052-40053 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ - DoubleWord integer)"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                values = self.modbus_server.slave_context.getValues(3, 52, 2)  # 40052-40053
                if values and len(values) == 2:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ 32-bit integer: —Å—Ç–∞—Ä—à–µ–µ —Å–ª–æ–≤–æ + –º–ª–∞–¥—à–µ–µ —Å–ª–æ–≤–æ
                    steps = (int(values[0]) << 16) | int(values[1])
                    return steps
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40052-40053: {e}")
        return None
    
    def read_register_40021(self) -> int:
        """–ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 40054 (–∏–º–ø—É–ª—å—Å–æ–≤ –Ω–∞ 1 –º–º)"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                value = self.modbus_server.slave_context.getValues(3, 54, 1)[0]  # 40054
                return int(value)
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ 40054: {e}")
        return None
    
    def read_register_40022_40023(self) -> float:
        """–ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40055-40056 (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ –ø–ª–æ—Å–∫–æ—Å—Ç–∏)"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                values = self.modbus_server.slave_context.getValues(3, 55, 2)  # 40055-40056
                if values and len(values) == 2:
                    high_word = int(values[0])  # 40055 - —Å—Ç–∞—Ä—à–∏–π
                    low_word = int(values[1])   # 40056 - –º–ª–∞–¥—à–∏–π
                    distance = self.doubleword_to_float(low_word, high_word)
                    return distance
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40055-40056: {e}")
        return None
    
    def read_measured_height(self) -> float:
        """–ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40057-40058 (–∏–∑–º–µ—Ä–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∏)"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                values = self.modbus_server.slave_context.getValues(3, 57, 2)  # 40057-40058
                if values and len(values) == 2:
                    high_word = int(values[0])  # 40057 - —Å—Ç–∞—Ä—à–∏–π
                    low_word = int(values[1])   # 40058 - –º–ª–∞–¥—à–∏–π
                    height = self.doubleword_to_float(low_word, high_word)
                    return height
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 40057-40058: {e}")
        return None
    
    def write_height_measurement_results(self, max_val: float, avg_val: float, min_val: float):
        """–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ ‚Üí 30040-30041
                self.write_stream_result_to_input_registers(max_val, 30040)
                
                # –°—Ä–µ–¥–Ω—è—è –≤—ã—Å–æ—Ç–∞ ‚Üí 30042-30043
                self.write_stream_result_to_input_registers(avg_val, 30042)
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ ‚Üí 30044-30045
                self.write_stream_result_to_input_registers(min_val, 30044)
                
                print(f" –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—Å–æ—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã: –º–∞–∫—Å={max_val:.3f}, —Å—Ä–µ–¥={avg_val:.3f}, –º–∏–Ω={min_val:.3f}")
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã: {e}")
    
    def handle_measure_wall_process_state(self):
        """
        CMD=10: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
        –ü—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–µ –¥–µ–ª–∞–µ–º –ø–æ–¥—Å—á—ë—Ç
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–µ—à (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        if self.cached_distance_1_2 is None:
            self.cached_distance_1_2 = self.read_calibrated_distance_1_2()
            print(f" –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 1-2: {self.cached_distance_1_2:.3f}–º–º")
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ (–æ–Ω —É–∂–µ —Ç–æ–ª—å–∫–æ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ)
        self.handle_measure_wall_state()
    
    def handle_calculate_wall_state(self):
        """
        CMD=11: –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥—Å—á—ë—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if not self.wall_calculated:
                print(" [CMD=11] –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ—Ä—Ö–Ω–µ–π —Å—Ç–µ–Ω–∫–∏...")
                
                # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞
                self.process_wall_measurement_results()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–≥–æ—Ç–æ–≤–æ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ"
                self.write_cycle_flag(110)
                print(" [STATUS=110] –ü–æ–¥—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –≥–æ—Ç–æ–≤ –∫ CMD=12")
                
                # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —Ä–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω
                self.wall_calculated = True
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–µ–Ω–∫–∏: {e}")
            self.current_state = SystemState.ERROR
    
    def handle_measure_flange_process_state(self):
        """
        CMD=12: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ñ–ª–∞–Ω—Ü–∞
        –ü—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–µ –¥–µ–ª–∞–µ–º –ø–æ–¥—Å—á—ë—Ç
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –∫–µ—à (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        if self.cached_distance_to_center is None:
            self.cached_distance_to_center = self.read_calibrated_distance_to_center()
            self.cached_distance_1_3 = self.read_calibrated_distance_1_3()
            self.cached_distance_sensor4 = self.read_calibrated_distance_sensor4()
            print(f" –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: —Ü–µ–Ω—Ç—Ä={self.cached_distance_to_center:.3f}–º–º, "
                  f"1-3={self.cached_distance_1_3:.3f}–º–º, sensor4={self.cached_distance_sensor4:.3f}–º–º")
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        self.handle_measure_flange_state()
    
    def handle_calculate_flange_state(self):
        """
        CMD=13: –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–ª–∞–Ω—Ü–∞
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥—Å—á—ë—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if not self.flange_calculated:
                print(" [CMD=13] –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–ª–∞–Ω—Ü–∞...")
                
                # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞
                self.process_flange_measurement_results()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–≥–æ—Ç–æ–≤–æ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ"
                self.write_cycle_flag(112)
                print(" [STATUS=112] –ü–æ–¥—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –≥–æ—Ç–æ–≤ –∫ CMD=14")
                
                # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —Ä–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω
                self.flange_calculated = True
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–ª–∞–Ω—Ü–∞: {e}")
            self.current_state = SystemState.ERROR
    
    def handle_measure_bottom_process_state(self):
        """
        CMD=14: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
        –ü—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–µ –¥–µ–ª–∞–µ–º –ø–æ–¥—Å—á—ë—Ç
        """
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–µ—à (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–µ—à —á—Ç–æ –∏ –¥–ª—è CMD=10, —Ç.–∫. —ç—Ç–æ —Ç–æ –∂–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 1-2
        if self.cached_distance_1_2 is None:
            self.cached_distance_1_2 = self.read_calibrated_distance_1_2()
            print(f" –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ 1-2: {self.cached_distance_1_2:.3f}–º–º")
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
        self.handle_measure_bottom_state()
    
    def handle_calculate_bottom_state(self):
        """
        CMD=15: –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥—Å—á—ë—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if not self.bottom_calculated:
                print(" [CMD=15] –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏...")
                
                # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –ø–æ–¥—Å—á—ë—Ç–∞
                self.process_bottom_wall_measurement_results()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–≥–æ—Ç–æ–≤–æ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–µ"
                self.write_cycle_flag(114)
                print(" [STATUS=114] –ü–æ–¥—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –≥–æ—Ç–æ–≤ –∫ CMD=16")
                
                # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ —Ä–∞—Å—á—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω
                self.bottom_calculated = True
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∏–∂–Ω–µ–π —Å—Ç–µ–Ω–∫–∏: {e}")
            self.current_state = SystemState.ERROR
    
    def handle_quality_evaluation_state(self):
        """
        CMD=16: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–¥–µ–ª–∏—è
        """
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if not self.quality_evaluated:
                print(" [CMD=16] –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–¥–µ–ª–∏—è...")
                
                # –ß–∏—Ç–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É –∑–∞–≥–æ—Ç–æ–≤–∫–∏
                measured_height = self.read_measured_height()
                if measured_height is not None:
                    print(f" [CMD=16] –ò–∑–º–µ—Ä–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∑–∞–≥–æ—Ç–æ–≤–∫–∏ (40057-40058): {measured_height:.3f}–º–º")
                else:
                    print(f" [CMD=16] –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É –∑–∞–≥–æ—Ç–æ–≤–∫–∏!")
                
                # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–¥–µ–ª–∏—è
                quality_result = self.evaluate_product_quality()
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–æ–≤ –∏–∑–¥–µ–ª–∏–π
                self.update_product_counters(quality_result)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑–¥–µ–ª–∏—è
                self.increment_product_number()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–≥–æ—Ç–æ–≤–æ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é"
                self.write_cycle_flag(116)
                print(f" [STATUS=116] –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({quality_result}), –≥–æ—Ç–æ–≤ –∫ CMD=0")
                
                # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                self.quality_evaluated = True
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            self.current_state = SystemState.ERROR
    
    # ===== –ö–û–ù–ï–¶ –ù–û–í–´–• –ú–ï–¢–û–î–û–í =====
    
    def handle_stream_sensor1_state(self):
        """–ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–∞—Ç—á–∏–∫–∞ 1 (CMD=200)"""
        if not self.sensors:
            print(" –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 1!")
            self.current_state = SystemState.ERROR
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –∫–æ–º–∞–Ω–¥—ã
        current_cmd = self.get_current_command()
        if current_cmd != 200:
            print(f" –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å 200 –Ω–∞ {current_cmd}. –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–∞—Ç—á–∏–∫–∞ 1")
            self.handle_command(current_cmd)
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            if not self.stream_active_sensor1:
                if self.sensors.start_stream_mode(1):
                    self.stream_active_sensor1 = True
                    self.stream_measurement_count = 0
                    self.stream_start_time = time.time()
                    self.stream_measurements_buffer = []  # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
                    print(" –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 1")
                else:
                    print(" –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 1")
                    self.current_state = SystemState.ERROR
                    return
            
            # –ß–∏—Ç–∞–µ–º –æ–¥–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏–∑ –ø–æ—Ç–æ–∫–∞ (–∫–∞–∫ –≤ main.py)
            measurement = self.sensors.read_stream_data(self.sensor_range_mm)
            self.stream_measurement_count += 1
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
            if measurement is not None:
                # –ù–ï –û–ö–†–£–ì–õ–Ø–ï–ú - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å!
                self.stream_measurements_buffer.append(measurement)
                
                # –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 50 –∏–∑–º–µ—Ä–µ–Ω–∏–π
                if len(self.stream_measurements_buffer) % 50 == 0:
                    print(f" –û–¢–õ–ê–î–ö–ê: –í –±—É—Ñ–µ—Ä–µ {len(self.stream_measurements_buffer)} –∏–∑–º–µ—Ä–µ–Ω–∏–π, –ø–æ—Å–ª–µ–¥–Ω–µ–µ: {measurement:.6f}–º–º")
                
                # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å >100 –∏–∑–º–µ—Ä–µ–Ω–∏–π - —É—Å—Ä–µ–¥–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã!
                if len(self.stream_measurements_buffer) > 100:
                    avg_measurement = sum(self.stream_measurements_buffer) / len(self.stream_measurements_buffer)
                    # –ù–ï –û–ö–†–£–ì–õ–Ø–ï–ú –°–†–ï–î–ù–ï–ï - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å!
                    
                    print(f" –£–°–†–ï–î–ù–ï–ù–ò–ï: {len(self.stream_measurements_buffer)} –∏–∑–º–µ—Ä–µ–Ω–∏–π -> {avg_measurement:.6f}–º–º")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Input Register 30001-30002 (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–æ–π)
                    try:
                        self.write_stream_result_to_input_registers(avg_measurement, 30001)
                        print(f" –ó–ê–ü–ò–°–¨ –í –†–ï–ì–ò–°–¢–†–´: {avg_measurement:.6f}–º–º -> 30001-30002 –£–°–ü–ï–®–ù–û")
                    except Exception as e:
                        print(f" –û–®–ò–ë–ö–ê –ó–ê–ü–ò–°–ò –í –†–ï–ì–ò–°–¢–†–´: {e}")
                    
                    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    current_time = time.time()
                    elapsed = current_time - self.stream_start_time
                    frequency = self.stream_measurement_count / elapsed if elapsed > 0 else 0
                    valid_count = len(self.stream_measurements_buffer)
                    
                    print(f" –ü–æ—Ç–æ–∫ –¥–∞—Ç—á–∏–∫–∞ 1: {elapsed:5.1f}—Å | –ò–∑–º–µ—Ä–µ–Ω–∏–π: {self.stream_measurement_count:6d} | "
                          f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency:7.1f} –ì—Ü | –£—Å—Ä–µ–¥–Ω–µ–Ω–æ {valid_count} –∏–∑–º–µ—Ä–µ–Ω–∏–π | "
                          f"–°—Ä–µ–¥–Ω–µ–µ: {avg_measurement:.6f}–º–º -> –†–µ–≥–∏—Å—Ç—Ä—ã 30001-30002")
                    
                    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
                    self.stream_measurements_buffer = []
                    print(f" –ë–£–§–ï–† –û–ß–ò–©–ï–ù, —Ä–∞–∑–º–µ—Ä: {len(self.stream_measurements_buffer)}")
            else:
                # –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–≥–¥–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–µ None
                if self.stream_measurement_count % 1000 == 0:
                    print(f" –û–¢–õ–ê–î–ö–ê: –ò–∑–º–µ—Ä–µ–Ω–∏–µ #{self.stream_measurement_count} = None")
                
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É (–±–µ–∑ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è)
            current_time = time.time()
            if hasattr(self, '_last_stream_print_1'):
                if current_time - self._last_stream_print_1 > 1.0:  # –†–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
                    elapsed = current_time - self.stream_start_time
                    frequency = self.stream_measurement_count / elapsed if elapsed > 0 else 0
                    buffer_size = len(self.stream_measurements_buffer)
                    
                    print(f" –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: {elapsed:5.1f}—Å | –ò–∑–º–µ—Ä–µ–Ω–∏–π: {self.stream_measurement_count:6d} | "
                          f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency:7.1f} –ì—Ü | –í –±—É—Ñ–µ—Ä–µ: {buffer_size}")
                    
                    self._last_stream_print_1 = current_time
            else:
                self._last_stream_print_1 = current_time
            
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–∞—Ç—á–∏–∫–∞ 1: {e}")
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if self.stream_active_sensor1:
                self.sensors.stop_stream_mode(1)
                self.stream_active_sensor1 = False
            self.current_state = SystemState.ERROR
    
    def handle_stream_sensor2_state(self):
        """–ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–∞—Ç—á–∏–∫–∞ 2 (CMD=201)"""
        if not self.sensors:
            print(" –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 2!")
            self.current_state = SystemState.ERROR
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –∫–æ–º–∞–Ω–¥—ã
        current_cmd = self.get_current_command()
        if current_cmd != 201:
            print(f" –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å 201 –Ω–∞ {current_cmd}. –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–∞—Ç—á–∏–∫–∞ 2")
            self.handle_command(current_cmd)
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            if not self.stream_active_sensor2:
                if self.sensors.start_stream_mode(2):
                    self.stream_active_sensor2 = True
                    self.stream_measurement_count = 0
                    self.stream_start_time = time.time()
                    self.stream_measurements_buffer = []
                    print(" –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 2")
                else:
                    print(" –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 2")
                    self.current_state = SystemState.ERROR
                    return
            
            # –ß–∏—Ç–∞–µ–º –æ–¥–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏–∑ –ø–æ—Ç–æ–∫–∞
            measurement = self.sensors.read_stream_data(self.sensor_range_mm)
            self.stream_measurement_count += 1
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
            if measurement is not None:
                self.stream_measurements_buffer.append(measurement)
                
                # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å >100 –∏–∑–º–µ—Ä–µ–Ω–∏–π - —É—Å—Ä–µ–¥–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã!
                if len(self.stream_measurements_buffer) > 100:
                    avg_measurement = sum(self.stream_measurements_buffer) / len(self.stream_measurements_buffer)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Input Register 30003-30004
                    self.write_stream_result_to_input_registers(avg_measurement, 30003)
                    
                    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    current_time = time.time()
                    elapsed = current_time - self.stream_start_time
                    frequency = self.stream_measurement_count / elapsed if elapsed > 0 else 0
                    valid_count = len(self.stream_measurements_buffer)
                    
                    print(f" –ü–æ—Ç–æ–∫ –¥–∞—Ç—á–∏–∫–∞ 2: {elapsed:5.1f}—Å | –ò–∑–º–µ—Ä–µ–Ω–∏–π: {self.stream_measurement_count:6d} | "
                          f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency:7.1f} –ì—Ü | –£—Å—Ä–µ–¥–Ω–µ–Ω–æ {valid_count} –∏–∑–º–µ—Ä–µ–Ω–∏–π | "
                          f"–°—Ä–µ–¥–Ω–µ–µ: {avg_measurement:.3f}–º–º")
                    
                    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
                    self.stream_measurements_buffer = []
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–∞—Ç—á–∏–∫–∞ 2: {e}")
            if self.stream_active_sensor2:
                self.sensors.stop_stream_mode(2)
                self.stream_active_sensor2 = False
            self.current_state = SystemState.ERROR
    
    def handle_stream_sensor3_state(self):
        """–ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–∞—Ç—á–∏–∫–∞ 3 (CMD=202)"""
        if not self.sensors:
            print(" –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 3!")
            self.current_state = SystemState.ERROR
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –∫–æ–º–∞–Ω–¥—ã
        current_cmd = self.get_current_command()
        if current_cmd != 202:
            print(f" –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å 202 –Ω–∞ {current_cmd}. –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–∞—Ç—á–∏–∫–∞ 3")
            self.handle_command(current_cmd)
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            if not self.stream_active_sensor3:
                if self.sensors.start_stream_mode(3):
                    self.stream_active_sensor3 = True
                    self.stream_measurement_count = 0
                    self.stream_start_time = time.time()
                    self.stream_measurements_buffer = []
                    print(" –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 3")
                else:
                    print(" –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 3")
                    self.current_state = SystemState.ERROR
                    return
            
            # –ß–∏—Ç–∞–µ–º –æ–¥–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏–∑ –ø–æ—Ç–æ–∫–∞
            measurement = self.sensors.read_stream_data(self.sensor_range_mm)
            self.stream_measurement_count += 1
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
            if measurement is not None:
                self.stream_measurements_buffer.append(measurement)
                
                # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å >100 –∏–∑–º–µ—Ä–µ–Ω–∏–π - —É—Å—Ä–µ–¥–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã!
                if len(self.stream_measurements_buffer) > 100:
                    avg_measurement = sum(self.stream_measurements_buffer) / len(self.stream_measurements_buffer)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Input Register 30005-30006
                    self.write_stream_result_to_input_registers(avg_measurement, 30005)
                    
                    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    current_time = time.time()
                    elapsed = current_time - self.stream_start_time
                    frequency = self.stream_measurement_count / elapsed if elapsed > 0 else 0
                    valid_count = len(self.stream_measurements_buffer)
                    
                    print(f" –ü–æ—Ç–æ–∫ –¥–∞—Ç—á–∏–∫–∞ 3: {elapsed:5.1f}—Å | –ò–∑–º–µ—Ä–µ–Ω–∏–π: {self.stream_measurement_count:6d} | "
                          f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency:7.1f} –ì—Ü | –£—Å—Ä–µ–¥–Ω–µ–Ω–æ {valid_count} –∏–∑–º–µ—Ä–µ–Ω–∏–π | "
                          f"–°—Ä–µ–¥–Ω–µ–µ: {avg_measurement:.3f}–º–º")
                    
                    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
                    self.stream_measurements_buffer = []
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–∞—Ç—á–∏–∫–∞ 3: {e}")
            if self.stream_active_sensor3:
                self.sensors.stop_stream_mode(3)
                self.stream_active_sensor3 = False
            self.current_state = SystemState.ERROR
    
    def handle_stream_sensor4_state(self):
        """–ü–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–∞—Ç—á–∏–∫–∞ 4 (CMD=203)"""
        if not self.sensors:
            print(" –û—à–∏–±–∫–∞: –¥–∞—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 4!")
            self.current_state = SystemState.ERROR
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –∫–æ–º–∞–Ω–¥—ã
        current_cmd = self.get_current_command()
        if current_cmd != 203:
            print(f" –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Å 203 –Ω–∞ {current_cmd}. –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–∞—Ç—á–∏–∫–∞ 4")
            self.handle_command(current_cmd)
            return
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
            if not self.stream_active_sensor4:
                if self.sensors.start_stream_mode(4):
                    self.stream_active_sensor4 = True
                    self.stream_measurement_count = 0
                    self.stream_start_time = time.time()
                    self.stream_measurements_buffer = []
                    print(" –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 4")
                else:
                    print(" –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞ 4")
                    self.current_state = SystemState.ERROR
                    return
            
            # –ß–∏—Ç–∞–µ–º –æ–¥–Ω–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –∏–∑ –ø–æ—Ç–æ–∫–∞
            measurement = self.sensors.read_stream_data(self.sensor_range_mm)
            self.stream_measurement_count += 1
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
            if measurement is not None:
                self.stream_measurements_buffer.append(measurement)
                
                # –ï—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å >100 –∏–∑–º–µ—Ä–µ–Ω–∏–π - —É—Å—Ä–µ–¥–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–µ–≥–∏—Å—Ç—Ä—ã!
                if len(self.stream_measurements_buffer) > 100:
                    avg_measurement = sum(self.stream_measurements_buffer) / len(self.stream_measurements_buffer)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Input Register 30007-30008
                    self.write_stream_result_to_input_registers(avg_measurement, 30007)
                    
                    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    current_time = time.time()
                    elapsed = current_time - self.stream_start_time
                    frequency = self.stream_measurement_count / elapsed if elapsed > 0 else 0
                    valid_count = len(self.stream_measurements_buffer)
                    
                    print(f" –ü–æ—Ç–æ–∫ –¥–∞—Ç—á–∏–∫–∞ 4: {elapsed:5.1f}—Å | –ò–∑–º–µ—Ä–µ–Ω–∏–π: {self.stream_measurement_count:6d} | "
                          f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency:7.1f} –ì—Ü | –£—Å—Ä–µ–¥–Ω–µ–Ω–æ {valid_count} –∏–∑–º–µ—Ä–µ–Ω–∏–π | "
                          f"–°—Ä–µ–¥–Ω–µ–µ: {avg_measurement:.3f}–º–º")
                    
                    # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö 100 –∏–∑–º–µ—Ä–µ–Ω–∏–π
                    self.stream_measurements_buffer = []
                
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–∞—Ç—á–∏–∫–∞ 4: {e}")
            if self.stream_active_sensor4:
                self.sensors.stop_stream_mode(4)
                self.stream_active_sensor4 = False
            self.current_state = SystemState.ERROR
    
    
    def write_stream_result_to_input_registers(self, value: float, base_address: int):
        """–ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ Input —Ä–µ–≥–∏—Å—Ç—Ä—ã"""
        try:
            if self.modbus_server and self.modbus_server.slave_context:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º float –≤ –¥–≤–∞ 16-–±–∏—Ç–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞
                low_word, high_word = self.float_to_doubleword(value)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
                reg_index_high = base_address - 30000      # –°—Ç–∞—Ä—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                reg_index_low = base_address - 30000 + 1   # –ú–ª–∞–¥—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Input —Ä–µ–≥–∏—Å—Ç—Ä—ã (—Ñ—É–Ω–∫—Ü–∏—è 4)
                self.modbus_server.slave_context.setValues(4, reg_index_high, [int(high_word)])  # –°—Ç–∞—Ä—à–∏–π
                self.modbus_server.slave_context.setValues(4, reg_index_low, [int(low_word)])    # –ú–ª–∞–¥—à–∏–π
                
        except Exception as e:
            print(f" –û–®–ò–ë–ö–ê –ó–ê–ü–ò–°–ò –í INPUT –†–ï–ì–ò–°–¢–†–´ {base_address}-{base_address+1}: {e}")
            import traceback
            traceback.print_exc()
    
    def handle_error_state(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–∫–∏"""
        print(" –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏—Å—Ç–µ–º—É.")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–°–ò–°–¢–ï–ú–ê –õ–ê–ó–ï–†–ù–û–ô –ì–ï–û–ú–ï–¢–†–ò–ò")
    print("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ –†–§602 + Modbus + –ê–≤—Ç–æ–º–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    PORT = 'COM11'  # –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç –µ—Å–ª–∏ COM7 –∑–∞–Ω—è—Ç
    BAUDRATE = 921600
    MODBUS_PORT = 502
    ENABLE_DEBUG_GUI = True  # –í–∫–ª—é—á–∏—Ç—å GUI –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Modbus
    TEST_MODE = False  # –†–µ–∂–∏–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞—Ç—á–∏–∫–∞–º–∏
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    system = LaserGeometrySystem(PORT, BAUDRATE, MODBUS_PORT, test_mode=TEST_MODE, enable_debug_gui=ENABLE_DEBUG_GUI)
    
    try:
        system.start_system()
    except KeyboardInterrupt:
        print("\n –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        try:
            system.stop_system()
        except:
            pass
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        cleanup_laser_system_optimizations()


if __name__ == "__main__":
    main()
 