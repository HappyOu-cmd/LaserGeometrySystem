#!/usr/bin/env python3
"""
üéØ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞—Ç—á–∏–∫–æ–≤ RIFTEK –†–§602

–ò–°–ü–†–ê–í–õ–ï–ù–´ –¢–û–†–ú–û–ó–ê –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞—Ç—á–∏–∫–∞–º–∏!
"""

import tkinter as tk
from tkinter import ttk, messagebox
import threading
import time
import queue
from main import HighSpeedRiftekSensor

class SensorGUISimpleOptimized:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±–µ–∑ —Ç–æ—Ä–º–æ–∑–æ–≤"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("RIFTEK –†–§602 - –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ç–æ–ª—â–∏–Ω—ã (t = L - (d1 + d2))")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤
        self.sensors = None
        self.is_running = False
        self.measurement_thread = None
        
        # –°—á–µ—Ç—á–∏–∫–∏
        self.measurement_counter = 0
        self.filtered_counter = 0
        self.data_queue = queue.Queue(maxsize=100)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏
        
        # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.current_values = {
            'sensor1': 0.0,
            'sensor2': 0.0,
            'sensor3': 0.0,
            'sensor4': 0.0,
            'thickness': 0.0  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'difference' –Ω–∞ 'thickness'
        }
        
        # –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ L –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã t = L - (d1 + d2)
        self.calibration_L = tk.DoubleVar(value=50.0)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50–º–º
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        self.enable_filtering = tk.BooleanVar(value=False)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –û–¢–ö–õ–Æ–ß–ï–ù–ê
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_interface()
        
        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI
        self.update_gui()
        
    def setup_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(self.root)
        title_frame.pack(fill=tk.X, padx=10, pady=10)
        
        title_label = ttk.Label(title_frame, text="–î–ê–¢–ß–ò–ö–ò RIFTEK –†–§602 - –ò–ó–ú–ï–†–ï–ù–ò–ï –¢–û–õ–©–ò–ù–´", 
                               font=("Arial", 16, "bold"))
        title_label.pack()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.setup_connection_frame()
        
        # 5 –æ–∫–æ—à–µ–∫ —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏
        self.setup_display_boxes()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.setup_control_frame()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.setup_statistics_frame()
        
    def setup_connection_frame(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        conn_frame = ttk.LabelFrame(self.root, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", padding=10)
        conn_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        top_row = ttk.Frame(conn_frame)
        top_row.pack(fill=tk.X, pady=(0, 5))
        
        # COM –ø–æ—Ä—Ç
        port_frame = ttk.Frame(top_row)
        port_frame.pack(side=tk.LEFT, padx=10)
        
        ttk.Label(port_frame, text="COM –ø–æ—Ä—Ç:").pack()
        self.port_var = tk.StringVar(value="COM7")
        port_entry = ttk.Entry(port_frame, textvariable=self.port_var, width=10)
        port_entry.pack()
        
        # Baudrate
        baud_frame = ttk.Frame(top_row)
        baud_frame.pack(side=tk.LEFT, padx=10)
        
        ttk.Label(baud_frame, text="Baudrate:").pack()
        self.baudrate_var = tk.StringVar(value="921600")
        baud_entry = ttk.Entry(baud_frame, textvariable=self.baudrate_var, width=10)
        baud_entry.pack()
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        status_frame = ttk.Frame(top_row)
        status_frame.pack(side=tk.RIGHT, padx=10)
        
        ttk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å:").pack()
        self.status_label = ttk.Label(status_frame, text="üî¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", 
                                     foreground="red", font=("Arial", 10, "bold"))
        self.status_label.pack()
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
        bottom_row = ttk.Frame(conn_frame)
        bottom_row.pack(fill=tk.X)
        
        # –ß–µ–∫–±–æ–∫—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        filter_frame = ttk.Frame(bottom_row)
        filter_frame.pack(side=tk.LEFT, padx=10)
        
        self.filter_checkbox = ttk.Checkbutton(
            filter_frame, 
            text="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π (–µ—Å–ª–∏ –æ–¥–∏–Ω –¥–∞—Ç—á–∏–∫ 0, –¥—Ä—É–≥–æ–π >0)", 
            variable=self.enable_filtering
        )
        self.filter_checkbox.pack()
        
        # –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ L
        calib_frame = ttk.Frame(bottom_row)
        calib_frame.pack(side=tk.LEFT, padx=20)
        
        ttk.Label(calib_frame, text="–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ L (–º–º):", font=("Arial", 9, "bold")).pack(side=tk.LEFT)
        calib_spinbox = ttk.Spinbox(calib_frame, textvariable=self.calibration_L, 
                                   from_=10.0, to=500.0, increment=0.1, width=8,
                                   format="%.1f")
        calib_spinbox.pack(side=tk.LEFT, padx=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = ttk.Label(bottom_row, 
                              text="üí° L = —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–∞—Ç—á–∏–∫–∞–º–∏", 
                              foreground="blue", font=("Arial", 9))
        info_label.pack(side=tk.RIGHT, padx=10)
        
    def setup_display_boxes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ 5 –æ–∫–æ—à–µ–∫ —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏"""
        display_frame = ttk.LabelFrame(self.root, text="–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤", padding=15)
        display_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ - 4 –¥–∞—Ç—á–∏–∫–∞
        top_frame = ttk.Frame(display_frame)
        top_frame.pack(fill=tk.X, pady=(0, 15))
        
        # –î–∞—Ç—á–∏–∫ 1
        self.create_sensor_box(top_frame, "–î–ê–¢–ß–ò–ö 1", "red", 0, 0)
        self.sensor1_value = self.value_labels[0]
        
        # –î–∞—Ç—á–∏–∫ 2  
        self.create_sensor_box(top_frame, "–î–ê–¢–ß–ò–ö 2", "purple", 0, 1)
        self.sensor2_value = self.value_labels[1]
        
        # –î–∞—Ç—á–∏–∫ 3
        self.create_sensor_box(top_frame, "–î–ê–¢–ß–ò–ö 3", "green", 0, 2)
        self.sensor3_value = self.value_labels[2]
        
        # –î–∞—Ç—á–∏–∫ 4
        self.create_sensor_box(top_frame, "–î–ê–¢–ß–ò–ö 4", "blue", 0, 3)
        self.sensor4_value = self.value_labels[3]
        
        # –ù–∏–∂–Ω–∏–π —Ä—è–¥ - —Ç–æ–ª—â–∏–Ω–∞
        bottom_frame = ttk.Frame(display_frame)
        bottom_frame.pack(fill=tk.X)
        
        # –û–∫–æ—à–∫–æ —Ç–æ–ª—â–∏–Ω—ã (–ø–æ —Ü–µ–Ω—Ç—Ä—É)
        thickness_frame = ttk.Frame(bottom_frame)
        thickness_frame.pack(expand=True)
        
        thickness_box = ttk.LabelFrame(thickness_frame, text="–¢–û–õ–©–ò–ù–ê t = L - (d1 + d2)", padding=20)
        thickness_box.pack(padx=10, pady=5)
        
        self.thickness_value = ttk.Label(thickness_box, text="0.000", 
                                        font=("Arial", 24, "bold"), 
                                        foreground="red")
        self.thickness_value.pack()
        
        ttk.Label(thickness_box, text="–º–º", font=("Arial", 12)).pack()
        
    def create_sensor_box(self, parent, title, color, row, col):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–æ—à–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞"""
        if not hasattr(self, 'value_labels'):
            self.value_labels = []
            
        # –†–∞–º–∫–∞ –¥–ª—è –¥–∞—Ç—á–∏–∫–∞
        sensor_frame = ttk.LabelFrame(parent, text=title, padding=15)
        sensor_frame.grid(row=row, column=col, padx=10, pady=5, sticky="nsew")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ç–∫–∏ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        parent.grid_columnconfigure(col, weight=1)
        
        # –ó–Ω–∞—á–µ–Ω–∏–µ
        value_label = ttk.Label(sensor_frame, text="0.000", 
                               font=("Arial", 20, "bold"), 
                               foreground=color)
        value_label.pack()
        
        # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        unit_label = ttk.Label(sensor_frame, text="–º–º", font=("Arial", 10))
        unit_label.pack()
        
        self.value_labels.append(value_label)
        
    def setup_control_frame(self):
        """–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = ttk.Frame(self.root)
        control_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø
        self.start_button = ttk.Button(control_frame, text="‚ñ∂ –°–¢–ê–†–¢", 
                                      command=self.toggle_measurement,
                                      style="Accent.TButton")
        self.start_button.pack(side=tk.LEFT, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        reset_button = ttk.Button(control_frame, text="üîÑ –°–ë–†–û–°", 
                                 command=self.reset_values)
        reset_button.pack(side=tk.LEFT, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        save_button = ttk.Button(control_frame, text="üíæ –°–û–•–†–ê–ù–ò–¢–¨", 
                                command=self.save_data)
        save_button.pack(side=tk.LEFT, padx=10)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        exit_button = ttk.Button(control_frame, text="‚ùå –í–´–•–û–î", 
                                command=self.on_closing)
        exit_button.pack(side=tk.RIGHT, padx=10)
        
    def setup_statistics_frame(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        stats_frame = ttk.LabelFrame(self.root, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", padding=10)
        stats_frame.pack(fill=tk.X, padx=10, pady=(0, 10))
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - —Å—á–µ—Ç—á–∏–∫–∏
        left_frame = ttk.Frame(stats_frame)
        left_frame.pack(side=tk.LEFT)
        
        self.measurements_label = ttk.Label(left_frame, text="–ò–∑–º–µ—Ä–µ–Ω–∏–π: 0")
        self.measurements_label.pack(side=tk.LEFT, padx=10)
        
        self.frequency_label = ttk.Label(left_frame, text="–ß–∞—Å—Ç–æ—Ç–∞: 0.0 –ì—Ü")
        self.frequency_label.pack(side=tk.LEFT, padx=10)
        
        self.errors_label = ttk.Label(left_frame, text="–û—à–∏–±–æ–∫: 0")
        self.errors_label.pack(side=tk.LEFT, padx=10)
        
        self.filtered_label = ttk.Label(left_frame, text="–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: 0")
        self.filtered_label.pack(side=tk.LEFT, padx=10)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –≤—Ä–µ–º—è
        right_frame = ttk.Frame(stats_frame)
        right_frame.pack(side=tk.RIGHT)
        
        self.time_label = ttk.Label(right_frame, text="", font=("Arial", 10))
        self.time_label.pack()
        
    def toggle_measurement(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
        if not self.is_running:
            self.start_measurement()
        else:
            self.stop_measurement()
            
    def start_measurement(self):
        """–ó–∞–ø—É—Å–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
        try:
            # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥–∞—Ç—á–∏–∫–∞–º
            port = self.port_var.get()
            baudrate = int(self.baudrate_var.get())
            
            self.sensors = HighSpeedRiftekSensor(port, baudrate, timeout=0.002)
            
            if not self.sensors.connect():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–∞—Ç—á–∏–∫–∞–º!")
                return
                
            # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π
            self.is_running = True
            self.measurement_thread = threading.Thread(target=self.measurement_loop, daemon=True)
            self.measurement_thread.start()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self.start_button.config(text="‚è∏ –°–¢–û–ü")
            self.status_label.config(text="üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω", foreground="green")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            
    def stop_measurement(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
        self.is_running = False
        
        if self.measurement_thread:
            self.measurement_thread.join(timeout=1.0)
            
        if self.sensors:
            self.sensors.disconnect()
            self.sensors = None
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.start_button.config(text="‚ñ∂ –°–¢–ê–†–¢")
        self.status_label.config(text="üî¥ –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", foreground="red")
        
    def measurement_loop(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
        measurement_times = []
        error_count = 0
        max_errors = 10  # –ú–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ –ø–µ—Ä–µ–¥ –ø–∞—É–∑–æ–π
        
        while self.is_running:
            try:
                current_time = time.time()
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º QUAD –∏–∑–º–µ—Ä–µ–Ω–∏–µ
                sensor1_mm, sensor2_mm, sensor3_mm, sensor4_mm = self.sensors.perform_quad_sensor_measurement(
                    25.0, 25.0, 25.0, 25.0
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if all(v is not None for v in [sensor1_mm, sensor2_mm, sensor3_mm, sensor4_mm]):
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ—Ä–µ–Ω–∏–∏
                    error_count = 0
                    
                    # –£–°–õ–û–í–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
                    should_filter = False
                    if self.enable_filtering.get():
                        sensor1_is_zero = abs(sensor1_mm) < 0.001  
                        sensor2_is_zero = abs(sensor2_mm) < 0.001
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–∞—Ç—á–∏–∫–æ–≤ 1 –∏ 2
                        if (sensor1_is_zero and not sensor2_is_zero) or (not sensor1_is_zero and sensor2_is_zero):
                            should_filter = True
                            self.filtered_counter += 1
                    
                    # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ–ª—â–∏–Ω—É –ø–æ —Ñ–æ—Ä–º—É–ª–µ t = L - (d1 + d2)
                    L_value = self.calibration_L.get()
                    thickness_value = L_value - (sensor1_mm + sensor2_mm)
                    
                    # –í–°–ï–ì–î–ê —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π
                    self.measurement_counter += 1
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ (–¥–∞–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ)
                    data = {
                        'sensor1_value': sensor1_mm,
                        'sensor2_value': sensor2_mm,
                        'sensor3_value': sensor3_mm,
                        'sensor4_value': sensor4_mm,
                        'thickness_value': thickness_value,
                        'L_value': L_value,
                        'filtered_count': self.filtered_counter,
                        'is_filtered': should_filter,
                        'timestamp': current_time
                    }
                    
                    # –ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    try:
                        self.data_queue.put_nowait(data)
                    except queue.Full:
                        # –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø–æ–ª–Ω–∞—è, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                        try:
                            self.data_queue.get_nowait()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
                            self.data_queue.put_nowait(data)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                        except queue.Empty:
                            pass
                    
                    # –†–∞—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –∏–∑–º–µ—Ä–µ–Ω–∏–π)
                    measurement_times.append(current_time)
                    if len(measurement_times) > 30:
                        measurement_times = measurement_times[-30:]
                        
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                    error_count += 1
                    if error_count >= max_errors:
                        # –î–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
                        time.sleep(0.01)
                        error_count = 0
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: {e}")
                error_count += 1
                if error_count >= max_errors:
                    time.sleep(0.01)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                    error_count = 0
                
    def update_gui(self):
        """–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        updated = False
        updates_count = 0
        max_updates_per_cycle = 5  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ —Ü–∏–∫–ª
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ —Ä–∞–∑ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ç–æ—Ä–º–æ–∑–æ–≤
        while updates_count < max_updates_per_cycle:
            try:
                data = self.data_queue.get_nowait()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                self.current_values['sensor1'] = data['sensor1_value']
                self.current_values['sensor2'] = data['sensor2_value'] 
                self.current_values['sensor3'] = data['sensor3_value']
                self.current_values['sensor4'] = data['sensor4_value']
                self.current_values['thickness'] = data['thickness_value']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–æ—à–∫–∏ —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –°–ï–†–´–ú —Ü–≤–µ—Ç–æ–º
                if data.get('is_filtered', False):
                    # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - —Å–µ—Ä—ã–π —Ü–≤–µ—Ç
                    self.sensor1_value.config(text=f"{data['sensor1_value']:.3f}", foreground="gray")
                    self.sensor2_value.config(text=f"{data['sensor2_value']:.3f}", foreground="gray")
                    self.thickness_value.config(text=f"{data['thickness_value']:.3f}", foreground="gray")
                else:
                    # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –æ–±—ã—á–Ω—ã–µ —Ü–≤–µ—Ç–∞
                    self.sensor1_value.config(text=f"{data['sensor1_value']:.3f}", foreground="red")
                    self.sensor2_value.config(text=f"{data['sensor2_value']:.3f}", foreground="purple")
                    self.thickness_value.config(text=f"{data['thickness_value']:.3f}", foreground="red")
                
                # –î–∞—Ç—á–∏–∫–∏ 3 –∏ 4 –≤—Å–µ–≥–¥–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
                self.sensor3_value.config(text=f"{data['sensor3_value']:.3f}")
                self.sensor4_value.config(text=f"{data['sensor4_value']:.3f}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                self.filtered_label.config(text=f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {data['filtered_count']}")
                
                updated = True
                updates_count += 1
                
            except queue.Empty:
                break
                
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if updated and self.sensors and self.is_running:
            self.update_statistics()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        current_time = time.strftime("%H:%M:%S")
        self.time_label.config(text=f"–í—Ä–µ–º—è: {current_time}")
            
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
        self.root.after(100, self.update_gui)  # 100–º—Å –≤–º–µ—Å—Ç–æ 50–º—Å
        
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.sensors:
            total_measurements = self.sensors.measurement_count
            total_errors = self.sensors.error_count
            
            # –ß–∞—Å—Ç–æ—Ç–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π
            if hasattr(self.sensors, 'start_time') and self.sensors.start_time:
                elapsed = time.time() - self.sensors.start_time
                frequency = total_measurements / elapsed if elapsed > 0 else 0
            else:
                frequency = 0
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª—ã
            self.measurements_label.config(text=f"–ò–∑–º–µ—Ä–µ–Ω–∏–π: {total_measurements}")
            self.frequency_label.config(text=f"–ß–∞—Å—Ç–æ—Ç–∞: {frequency:.1f} –ì—Ü")
            self.errors_label.config(text=f"–û—à–∏–±–æ–∫: {total_errors}")
            
    def reset_values(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫ –Ω—É–ª—é"""
        self.sensor1_value.config(text="0.000", foreground="red")
        self.sensor2_value.config(text="0.000", foreground="purple")
        self.sensor3_value.config(text="0.000", foreground="green")
        self.sensor4_value.config(text="0.000", foreground="blue")
        self.thickness_value.config(text="0.000", foreground="red")
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤
        self.measurement_counter = 0
        self.filtered_counter = 0
        
        # –°–±—Ä–æ—Å —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        for key in self.current_values:
            self.current_values[key] = 0.0
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.measurements_label.config(text="–ò–∑–º–µ—Ä–µ–Ω–∏–π: 0")
        self.frequency_label.config(text="–ß–∞—Å—Ç–æ—Ç–∞: 0.0 –ì—Ü")
        self.errors_label.config(text="–û—à–∏–±–æ–∫: 0")
        self.filtered_label.config(text="–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: 0")
        
        messagebox.showinfo("–°–±—Ä–æ—Å", "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –∫ –Ω—É–ª—é")
        
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        try:
            filename = f"sensor_readings_optimized_{int(time.time())}.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("=== –ü–û–ö–ê–ó–ê–ù–ò–Ø –î–ê–¢–ß–ò–ö–û–í RIFTEK –†–§602 (–ò–ó–ú–ï–†–ï–ù–ò–ï –¢–û–õ–©–ò–ù–´) ===\n")
                f.write(f"–í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞: {'–î–∞' if self.enable_filtering.get() else '–ù–µ—Ç'}\n")
                f.write(f"–ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ L: {self.calibration_L.get():.3f} –º–º\n\n")
                f.write(f"–î–∞—Ç—á–∏–∫ 1 (d1):      {self.current_values['sensor1']:.6f} –º–º\n")
                f.write(f"–î–∞—Ç—á–∏–∫ 2 (d2):      {self.current_values['sensor2']:.6f} –º–º\n") 
                f.write(f"–î–∞—Ç—á–∏–∫ 3:           {self.current_values['sensor3']:.6f} –º–º\n")
                f.write(f"–î–∞—Ç—á–∏–∫ 4:           {self.current_values['sensor4']:.6f} –º–º\n\n")
                f.write(f"–¢–û–õ–©–ò–ù–ê t = L - (d1 + d2): {self.current_values['thickness']:.6f} –º–º\n")
                f.write(f"–§–æ—Ä–º—É–ª–∞: t = {self.calibration_L.get():.3f} - ({self.current_values['sensor1']:.3f} + {self.current_values['sensor2']:.3f})\n\n")
                f.write(f"–ò–∑–º–µ—Ä–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {self.measurement_counter}\n")
                f.write(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ:       {self.filtered_counter}\n")
                
            messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª:\n{filename}")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if self.is_running:
            self.stop_measurement()
        self.root.quit()


def main():
    """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    root = tk.Tk()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
    style = ttk.Style()
    try:
        style.theme_use('vista')  # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è Windows
    except:
        style.theme_use('default')
        
    app = SensorGUISimpleOptimized(root)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        print("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        if app.is_running:
            app.stop_measurement()


if __name__ == "__main__":
    main()
